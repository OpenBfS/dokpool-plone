# Dockerfile for running instance of ELAN as Standalone Container
#
# Requirements:
# Place an zodb-Backup (created with plonebackup) next to this Dockerfile and name it initialELAN-backup.tgz
#
# Info:
# This Container runs standalone using sqlite- and zope-Databses as backend.i
# No need for PostgreSQL, but not recommended for production use
#
# build with e.g. `docker build --force-rm=true -t bfs/elan5oel7 -f Dockerfile.oel7 .',
# then run with e.g.
# `docker run --name bfs_elan5_oel7 -dp 18081:8081 bfs/elan5oel7:latest'
#
# In case you want to interact with the container, use e.g.
# `docker exec -it bfs_elan5_oel7 "/bin/bash"'
#
FROM oraclelinux:latest
MAINTAINER Marco Lechner<mlechner@bfs.de>
# install the plone user and depending packages
RUN adduser --system --shell /bin/bash --home /home/plone --comment "Plone system user" plone
RUN mkdir -p /opt/bfs
RUN yum install -y gcc mercurial python-devel libffi-devel openssl-devel libxslt-devel python-psycopg2 postgresql-devel 
# the following clone will only work from within BfS net due to mandatory proxy authentication to access repo.
# You can modify the URL by adding https://<username>:pass@... - but do never push this to a repo!
RUN cd /opt/bfs/ && hg clone "https://redmine-koala.bfs.de/hg/elan"
RUN cd /opt/bfs/elan/Plone && python bootstrap.py
RUN cd /opt/bfs/elan/Plone && ./bin/buildout -Nvc docker_standalone.cfg
ADD initialELAN-backup.tgz /opt/bfs/elan/Plone/var/
RUN cd /opt/bfs/elan/Plone && ./bin/plonebackup-restore -n
RUN chown -R plone.plone /opt/bfs
USER plone
ENV HOME /home/plone
# try to use sqlite instead of postgreSQL as DB backend for transfer
WORKDIR /opt/bfs/elan/Plone
EXPOSE 8081
CMD [ "/opt/bfs/elan/Plone/bin/instance", "fg"]

