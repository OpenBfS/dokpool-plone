(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[6],{

/***/ "./.plone/++resource++mockup/resourceregistry/js/builder.js":
/*!******************************************************************!*\
  !*** ./.plone/++resource++mockup/resourceregistry/js/builder.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! mockup-patterns-modal */ \"./.plone/++resource++mockup/modal/pattern.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! mockup-patterns-resourceregistry-url/js/iframe */ \"./.plone/++resource++mockup/resourceregistry/js/iframe.js\"),\n  __webpack_require__(/*! translate */ \"./.plone/++resource++mockupjs/i18n-wrapper.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, Modal, _, utils, IFrame, _t){\n  'use strict';\n\n  var Builder = function(bundleName, bundleListItem){\n    var self = this;\n    self.bundleName = bundleName;\n    self.bundleListItem = bundleListItem;\n    self.rview = bundleListItem.options.registryView;\n    self.$results = null;\n    self.$btnClose = null;\n\n    self.rview.loading.show();\n    self.modal = new Modal($('<div/>').appendTo(self.rview.$el), {\n      html: _.template('<div id=\"content\">' +\n        '<h1>Bundle Builder</h1>' +\n        '<div class=\"start-info\"><p>You are about to build the <span class=\"label label-primary\">' +\n          '<%= name %></span> pattern. </p><p>This may take some a bit of time so ' +\n          'we will try to keep you updated on the progress.</p><p> Press the \"Build it\" ' +\n          'button to proceed.</p></div>' +\n        '<ul class=\"list-group hidden\"></ul>' +\n        '<button class=\"plone-btn plone-btn-default cancel hidden cancel-build\"><%- _t(\"Close\") %></button>' +\n        '<button class=\"plone-btn plone-btn-primary build\"><%- _t(\"Build it\") %></button>' +\n      '</div>')($.extend({ _t: _t }, bundleListItem.options)),\n      content: null,\n      width: 500,\n      buttons: '.plone-btn'\n    });\n    self.modal.on('shown', function() {\n      var $el = self.modal.$modal;\n      var $info = $el.find('.start-info');\n      self.$btnClose = $el.find('button.cancel-build');\n      var $btn = $el.find('button.build');\n      $btn.off('click').on('click', function(e){\n        e.preventDefault();\n        $info.addClass('hidden');\n        $btn.prop('disabled', true);\n        self.$results = $el.find('.list-group').removeClass('hidden');\n        self.buildJS();\n        self.rview.loading.show();\n      });\n\n      self.$btnClose.off('click').on('click', function(){\n        self.modal.hide();\n      });\n    });\n\n    self.addResult = function(txt, klass){\n      if(!klass){\n        klass = '';\n      }\n      self.$results.append('<li class=\"list-group-item ' + klass + '\">' + txt + '</li>');\n    };\n\n    self.run = function(){\n      self.modal.show();\n    };\n\n    self.finished = function(error){\n      var msg = _t('Finished!');\n      if(error){\n        msg = _t('Error in build process');\n      }\n      self.addResult(msg, 'list-group-item-warning');\n      self.$btnClose.removeClass('hidden');\n      self.rview.loading.hide();\n    };\n\n    self.buildJS = function(){\n      self.addResult(_t('building javascripts'));\n      $.ajax({\n        url: self.rview.options.data.manageUrl,\n        type: 'POST',\n        dataType: 'json',\n        data: {\n          action: 'js-build-config',\n          bundle: self.bundleName,\n          _authenticator: utils.getAuthenticator()\n        },\n        success: function(data){\n          /* sort of weird here, follow along. We'll build CSS after JS */\n          self._buildJSBundle(data);\n        },\n        error: function(){\n          self.addResult(_t('Error building resources'));\n          self.finished(true);\n        }\n      });\n    };\n\n    self._buildCSSBundle = function(config){\n      var iframe = new IFrame({\n        name: 'lessc',\n        resources: config.less.concat([\n          self.rview.options.data.lessConfigUrl,\n          self.rview.options.data.lessUrl]),\n        configure: function(iframe){\n          iframe.window.lessErrorReporting = function(what, error, href){\n            if(what !== 'remove'){\n              self.addResult(_t('less compilation error on file ') + href + ': ' + error);\n            }\n          };\n        }\n      });\n\n      /* XXX okay, wish there were a better way,\n         but we need to pool to find the out if it's down loading less */\n      self.addResult(config.less.length + _t(' css files to build'));\n      var lessModified = Boolean(\n          self.rview.options.data.lessModifyUrl === null ||\n          self.rview.options.data.lessModifyUrl === undefined\n      );\n      var checkFinished = function(){\n        var $styles =  $('style[type=\"text/css\"][id]', iframe.document);\n        for(var i=0; i<$styles.length; i=i+1){\n          var $style = $styles.eq(i);\n          if($style.attr('id') === 'less:error-message'){\n            self.addResult(_t('Error compiling less'));\n            return self.finished(true);\n          }\n        }\n        if($styles.length === config.less.length && lessModified === true){\n          // we're finished, save it\n          var data = {};\n          $styles.each(function(){\n            var $el = $(this);\n            data['data-' + $el.attr('id')] = $el.html();\n          });\n          iframe.destroy();\n          $.ajax({\n            url: self.rview.options.data.manageUrl,\n            type: 'POST',\n            dataType: 'json',\n            data: $.extend(data, {\n              action: 'save-less-build',\n              bundle: self.bundleName,\n              _authenticator: utils.getAuthenticator()\n            }),\n            success: function(data){\n              self.rview.options.data.overrides.push(data.filepath);\n              self.rview.tabView.overridesView.render();\n              self.addResult(_t('finished saving css bundles'));\n              self.finished();\n            },\n            error: function(){\n              self.addResult(_t('Error saving css bundle'));\n              self.finished(true);\n            }\n          });\n        }else if($styles.length === config.less.length){\n          $styles.each(function(){$(this).remove();});\n          /* XXX is this dead code? */\n          script = document.createElement('script');\n          script.setAttribute('type', 'text/javascript');\n          script.setAttribute('src', self.rview.options.data.lessModifyUrl);\n          head.appendChild(script);\n\n          lessModified = true;\n          setTimeout(checkFinished, 300);\n        }else{\n          setTimeout(checkFinished, 300);\n        }\n      };\n      checkFinished();\n    };\n\n    self.buildCSSBundle = function(){\n      self.addResult(_t('building CSS bundle'));\n      $.ajax({\n        url: self.rview.options.data.manageUrl,\n        type: 'POST',\n        dataType: 'json',\n        data: {\n          action: 'less-build-config',\n          bundle: self.bundleName,\n          _authenticator: utils.getAuthenticator()\n        },\n        success: function(data){\n          /* sort of weird here, follow along. We'll build CSS after JS */\n          self._buildCSSBundle(data);\n        },\n        error: function(){\n          self.addResult(_t('Error building css bundle'));\n          self.finished(true);\n        }\n      });\n    };\n\n    self._buildJSBundle = function(config){\n      if(config.include.length === 0){\n        self.addResult(_t('No javascripts to build, skipping'));\n        return self.buildCSSBundle();\n      }\n\n      config.out = function(results){\n        $.ajax({\n          url: self.rview.options.data.manageUrl,\n          type: 'POST',\n          dataType: 'json',\n          data: {\n            action: 'save-js-build',\n            bundle: self.bundleName,\n            data: results,\n            _authenticator: utils.getAuthenticator()\n          },\n          success: function(data){\n            self.rview.options.data.overrides.push(data.filepath);\n            self.rview.tabView.overridesView.render();\n          },\n          error: function(){\n            self.addResult(_t('Error building bundle'));\n            self.finished(true);\n          }\n        });\n      };\n      new IFrame({\n        name: 'rjs',\n        resources: [self.rview.options.data.rjsUrl],\n        onLoad: function(iframe){\n          iframe.window.requirejs.optimize(config, function(combined_files){\n            self.addResult(_t('Saved javascript bundle, Build results') + ': <pre>' + combined_files + '</pre>');\n            self.buildCSSBundle();\n            iframe.destroy();\n          });\n        }\n      });\n    };\n\n    return self;\n  };\n\n  return Builder;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/resourceregistry/js/builder.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/resourceregistry/js/fields.js":
/*!*****************************************************************!*\
  !*** ./.plone/++resource++mockup/resourceregistry/js/fields.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mockup-ui-url/views/base */ \"./.plone/++resource++mockupjs/ui/views/base.js\"),\n  __webpack_require__(/*! mockup-patterns-sortable */ \"./.plone/++resource++mockup/sortable/pattern.js\"),\n  __webpack_require__(/*! mockup-patterns-select2 */ \"./.plone/++resource++mockup/select2/pattern.js\"),\n  __webpack_require__(/*! translate */ \"./.plone/++resource++mockupjs/i18n-wrapper.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, _, BaseView, Sortable, Select2, _t) {\n  'use strict';\n\n\n  var ResourceDisplayFieldView = BaseView.extend({\n    tagName: 'div',\n    className: 'form-group',\n    template: _.template(\n      '<label class=\"col-sm-3 control-label\"><%- title %></label>' +\n      '<div class=\"col-sm-9\">' +\n        '<strong><%- value %></strong><br/>' +\n        '<%= description %>' +\n      '</div>'),\n    initialize: function(options) {\n      this.options = options;\n      for (var key in this.options) {\n        this[key] = this.options[key];\n      }\n      if (! this.value) {\n        this.template = _.template('');\n      }\n    },\n    serializedModel: function(){\n    },\n    afterRender: function(){\n      this.$el.addClass('field-' + this.options.name);\n    }\n\n  });\n\n  var ResourceInputFieldView = BaseView.extend({\n    tagName: 'div',\n    className: 'form-group',\n    events: {\n      'change input': 'inputChanged',\n      'keyup input': 'textChanged'\n    },\n    template: _.template(\n      '<label class=\"col-sm-3 control-label\"><%- title %></label>' +\n      '<div class=\"col-sm-9\">' +\n        '<input class=\"form-control input-sm\" name=\"name\" value=\"<%- value %>\" />' +\n        '<%= description %>' +\n      '</div>'),\n    timeout: -1,\n\n    serializedModel: function(){\n      return $.extend({}, {description: ''}, this.options);\n    },\n\n    textChanged: function(){\n      var self = this;\n      if(self.timeout){\n        clearTimeout(self.timeout);\n      }\n      self.timeout = setTimeout(function(){\n        self.inputChanged();\n      }, 200);\n    },\n\n    inputChanged: function(){\n      this.options.registryData[this.options.name] = this.$('input').val();\n      $(document).trigger('resource-data-changed');\n    },\n\n    afterRender: function(){\n      this.$el.addClass('field-' + this.options.name);\n    }\n\n  });\n\n  var VariableFieldView = ResourceInputFieldView.extend({\n    template: _.template(\n      '<div class=\"col-sm-4\">' +\n        '<input class=\"form-control input-sm field-name\" value=\"<%- name %>\" />' +\n      '</div>' +\n      '<div class=\"col-sm-7\">' +\n        '<input class=\"form-control input-sm field-value\" value=\"<%- value %>\" />' +\n      '</div>' +\n      '<div class=\"col-sm-1\">' +\n        '<button class=\"plone-btn plone-btn-danger plone-btn-xs\">Remove</button>' +\n      '</div>'),\n    events: {\n      'change input': 'inputChanged',\n      'keyup input': 'textChanged',\n      'click .plone-btn-danger': 'removeClicked'\n    },\n    removeClicked: function(e){\n      e.preventDefault();\n      this.$el.remove();\n      this.inputChanged();\n    },\n    inputChanged: function(e){\n      if(this.options.onChange){\n        this.options.onChange(e, this);\n      }\n    }\n  });\n\n\n  var PatternFieldView = VariableFieldView.extend({\n    events: {\n      'change input': 'inputChanged',\n      'keyup input': 'textChanged',\n      'change textarea': 'inputChanged',\n      'keyup textarea': 'textChanged',\n      'click .plone-btn-danger': 'removeClicked'\n    },\n    template: _.template(\n      '<div class=\"col-sm-4\">' +\n        '<input class=\"form-control input-sm field-name\" value=\"<%- name %>\" />' +\n      '</div>' +\n      '<div class=\"col-sm-7\">' +\n        '<textarea class=\"form-control field-value\"><%- value %></textarea>' +\n        '<span class=\"hidden glyphicon glyphicon-remove form-control-feedback\"></span>' +\n      '</div>' +\n      '<div class=\"col-sm-1\">' +\n        '<button class=\"plone-btn plone-btn-danger plone-btn-xs\"><%- _t(\"Remove\") %></button>' +\n      '</div>')\n  });\n\n\n  var ResourceBoolFieldView = ResourceInputFieldView.extend({\n    className: 'col-sm-offset-3 col-sm-9',\n    template: _.template(\n      '<div class=\"checkbox\">' +\n        '<label>' +\n          '<input type=\"checkbox\"> <%- title %></label>' +\n      '</div>'),\n    inputChanged: function(){\n      if(this.$('input')[0].checked){\n        this.options.registryData[this.options.name] = true;\n      }else{\n        this.options.registryData[this.options.name] = false;\n      }\n      $(document).trigger('resource-data-changed');\n    },\n    afterRender: function(){\n      ResourceInputFieldView.prototype.afterRender.apply(this);\n      if(this.options.value){\n        this.$('input')[0].checked = true;\n      }\n    }\n  });\n\n\n  var ResourceListFieldView = ResourceInputFieldView.extend({\n    sortable: false,\n    template: _.template(\n      '<label class=\"col-sm-3 control-label\"><%- title %></label>' +\n      '<ul class=\"col-sm-9 fields list-group\" />' +\n      '<button class=\"plone-btn plone-btn-default add pull-right\"><%- _t(\"Add\") %></button>'),\n    events: {\n      'click button.add': 'addRowClicked',\n      'change input': 'inputChanged',\n      'keyup input': 'textChanged',\n      'click button.remove': 'removeItem'\n    },\n\n    initialize: function(options){\n      ResourceInputFieldView.prototype.initialize.apply(this, [options]);\n      if(!this.options.value){\n        this.options.value = [];\n      }\n    },\n\n    inputChanged: function(){\n      var self = this;\n      var data = [];\n      self.$('input').each(function(){\n        data.push($(this).val());\n      });\n      self.options.registryData[self.options.name] = self.options.value = data;\n      $(document).trigger('resource-data-changed');\n    },\n\n    addRowClicked: function(e){\n      var self = this;\n      e.preventDefault();\n      self.options.value.push('');\n      self.render();\n      self.inputChanged();\n    },\n\n    removeItem: function(e){\n      e.preventDefault();\n      var $el = $(e.target).parents('li');\n      var index = $el.index();\n      this.options.value.splice(index, 1);\n      $el.remove();\n      this.inputChanged();\n    },\n\n    afterRender: function(){\n      ResourceInputFieldView.prototype.afterRender.apply(this);\n      var self = this;\n      var $container = self.$('.fields');\n      _.each(self.options.value, function(value){\n        $container.append('<li class=\"list-group-item\"><div class=\"input-group\">' +\n          '<input class=\"form-control input-sm\" value=\"' + value + '\" />' +\n          '<span class=\"input-group-btn\">' +\n            '<button class=\"plone-btn plone-btn-default remove plone-btn-sm\">' + _t('Remove') + '</button></div></li>');\n      });\n\n      if(self.sortable){\n        $container.addClass('pat-sortable');\n        self.dd = new Sortable($container, {\n          selector: 'li',\n          dragClass: 'dragging',\n          drop: function($el, delta) {\n            if (delta !== 0){\n              self.inputChanged();\n            }\n          }\n        });\n      }\n    }\n  });\n\n\n  var ResourceSortableListFieldView = ResourceListFieldView.extend({\n    sortable: true\n  });\n\n\n  var ResourceTextAreaFieldView = ResourceInputFieldView.extend({\n    inputChanged: function(){\n      this.options.registryData[this.options.name] = this.options.value = this.$('textarea').val();\n    },\n    template: _.template(\n      '<label class=\"col-sm-3 control-label\"><%- title %></label>' +\n      '<div class=\"col-sm-9\">' +\n        '<textarea class=\"form-control input-sm\" name=\"name\"><%- value %></textarea>' +\n      '</div>')\n  });\n\n\n  var ResourceSelectFieldView = ResourceInputFieldView.extend({\n    events: {\n      'change select': 'inputChanged'\n    },\n    inputChanged: function(){\n      this.options.registryData[this.options.name] = this.options.value = this.$('.select').select2('val');\n      $(document).trigger('resource-data-changed');\n    },\n\n    getSelectOptions: function(){\n      return [];\n    },\n\n    serializedModel: function(){\n      var self = this;\n      return $.extend({}, {\n        'options': self.getSelectOptions(),\n        'description': ''\n      }, self.options);\n    },\n\n    afterRender: function(){\n      ResourceInputFieldView.prototype.afterRender.apply(this);\n      var self = this;\n      var values = self.options.value;\n      var $select = self.$('.select');\n      self.select2 = new Select2($select, {\n        orderable: self.multiple,\n        multiple: self.multiple,\n        data: _.map(self.getSelectOptions(), function(val){\n          return {id: val, text: val};\n        })\n      });\n      $select.select2('val', values);\n      $select.on('change', function(){\n        self.inputChanged();\n      });\n    },\n\n    template: _.template(\n      '<label class=\"col-sm-3 control-label\"><%- title %></label>' +\n      '<div class=\"col-sm-9\">' +\n        '<input name=\"name\" class=\"select\" type=\"hidden\" style=\"width: 100%\" />' +\n        '<%= description %>' +\n      '</div>')\n  });\n\n\n  var BundleDependsFieldView = ResourceSelectFieldView.extend({\n    getSelectOptions: function(){\n      var self = this;\n      return ['', '*'].concat(_.filter(_.keys(self.options.containerData), function(name){\n        return name !== self.options.name;\n      }));\n    }\n  });\n\n\n  var BundleResourcesFieldView = ResourceSelectFieldView.extend({\n    multiple: true,\n    getSelectOptions: function(){\n      var self = this;\n      return _.sortBy(_.filter(_.keys(self.options.registryView.options.data.resources), function(name){\n        return name !== self.options.name;\n      }), function(item){\n        return item.toLowerCase();\n      });\n    }\n  });\n\n\n  var ResourceNameFieldView = ResourceInputFieldView.extend({\n    afterRender: function(){\n      ResourceInputFieldView.prototype.afterRender.apply(this);\n      this.$el.append('<span class=\"hidden glyphicon glyphicon-remove form-control-feedback\"></span>');\n    },\n\n    handleError: function(error){\n      if(error){\n        this.$el.addClass('has-error').addClass('has-feedback');\n        this.$('.form-control-feedback').removeClass('hidden');\n      }else{\n        this.$el.removeClass('has-error').removeClass('has-feedback');\n        this.$('.form-control-feedback').addClass('hidden');\n      }\n    },\n\n    inputChanged: function(){\n      $(document).trigger('resource-data-changed');\n      var value = this.$('input').val();\n      if(value === this.resourceName){\n        return this.handleError(false);\n      }\n      if(this.options.containerData[value] || !value){\n        // already taken\n        return this.handleError(true);\n      }\n      // move data\n      var data = this.options.containerData[this.resourceName];\n      this.options.containerData[value] = data;\n\n      if(this.resourceName !== value){\n        // and now delete old\n        delete this.options.containerData[this.resourceName];\n      }\n      this.resourceName = this.options.value = this.options.form.options.name = this.options.form.name = value;\n\n      if(this.options.parent){\n        this.options.parent.options.name = value;\n        this.options.parent.render();\n      }\n      if(this.options.form){\n        this.options.form.$('h3').html(value);\n      }\n      return this.handleError(false);\n    },\n    serializedModel: function(){\n      var data = $.extend({}, {\n        description: ''\n      }, this.options);\n      data.value = this.options.resourceName;\n      return data;\n    }\n  });\n\n\n  var MergeWithFieldView = ResourceSelectFieldView.extend({\n    multiple: false,\n    getSelectOptions: function() {\n      var self = this;\n      return ['', 'default', 'logged-in'];\n    }\n  });\n\n\n  return {\n    ResourceDisplayFieldView: ResourceDisplayFieldView,\n    VariableFieldView: VariableFieldView,\n    ResourceInputFieldView: ResourceInputFieldView,\n    ResourceNameFieldView: ResourceNameFieldView,\n    ResourceSortableListFieldView: ResourceSortableListFieldView,\n    ResourceTextAreaFieldView: ResourceTextAreaFieldView,\n    BundleResourcesFieldView: BundleResourcesFieldView,\n    BundleDependsFieldView: BundleDependsFieldView,\n    ResourceBoolFieldView: ResourceBoolFieldView,\n    PatternFieldView: PatternFieldView,\n    MergeWithFieldView: MergeWithFieldView\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/resourceregistry/js/fields.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/resourceregistry/js/iframe.js":
/*!*****************************************************************!*\
  !*** ./.plone/++resource++mockup/resourceregistry/js/iframe.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * much of this code is heavily barrowed from Rok Garbas's iframe\n * code that has since been removed from mockup\n */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($) {\n  'use strict';\n\n  window.IFrame = function(options) { this.init(options); };\n  window.IFrame.prototype = {\n    defaults: {\n      doctype: '<!doctype html>',\n      title: '',\n      name: '',\n      resources: [],\n      callback: function(){},\n      configure: function(){},\n      onLoad: function(){}\n    },\n\n    init: function(options) {\n      var self = this;\n      self.options = $.extend({}, self.defaults, options);\n\n      // register this guy\n      if(!window.iframe){\n        window.iframe = {};\n      }\n      window.iframe[self.options.name] = self;\n\n      self.loaded = false;\n\n      // Create iframe\n      var iframe = window.document.createElement('iframe');\n\n      iframe.setAttribute('id', self.options.name);\n      iframe.setAttribute('name', self.options.name);\n      iframe.setAttribute('style', 'display:none;');\n      iframe.setAttribute('src', 'javascript:false');\n\n      window.document.body.appendChild(iframe);\n      self.el = iframe;\n      self.window = iframe.contentWindow;\n      self.document = self.window.document;\n\n      self.options.configure(self);\n\n      var resourcesData = '';\n      for(var i=0; i<self.options.resources.length; i=i+1){\n        var url = self.options.resources[i];\n        var resource;\n        if (url.slice( -3 ) === '.js') {\n          resource = window.document.createElement('script');\n          resource.src = url;\n          resource.type = 'text/javascript';\n          resource.async = false;\n        } else if (url.slice( -4 ) === '.css') {\n          resource = window.document.createElement('link');\n          resource.href = url;\n          resource.type = 'text/css';\n          resource.rel = 'stylesheet';\n        } else if (url.slice( -5 ) === '.less') {\n          resource = window.document.createElement('link');\n          resource.href = url;\n          resource.type = 'text/css';\n          resource.rel = 'stylesheet/less';\n        }\n        resourcesData += '\\n' + resource.outerHTML;\n      }\n\n      self.document.open();\n      self.document.write(\n          self.options.doctype +\n          '<html>' +\n            '<head>' +\n              '<title>' + self.options.title + '</title>' +\n              '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">' +\n            '</head>' +\n            '<body onload=\"parent.window.iframe[\\'' +\n                self.options.name + '\\'].load()\">' +\n              resourcesData +\n            '</body>' +\n          '</html>'\n      );\n      self.document.close();\n    },\n\n    load: function() {\n      var self = this;\n\n      // check if already loaded\n      if ( self.loaded === true ) {\n        return;\n      }\n\n      // mark iframe as loaded\n      self.loaded = true;\n\n      self.options.onLoad(self);\n    },\n    destroy: function(){\n      delete window.iframe[this.options.name];\n      window.document.body.removeChild(this.el);\n    }\n  };\n\n  return window.IFrame;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/resourceregistry/js/iframe.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/resourceregistry/js/less.js":
/*!***************************************************************!*\
  !*** ./.plone/++resource++mockup/resourceregistry/js/less.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! mockup-ui-url/views/base */ \"./.plone/++resource++mockupjs/ui/views/base.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! mockup-patterns-resourceregistry-url/js/fields */ \"./.plone/++resource++mockup/resourceregistry/js/fields.js\"),\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, BaseView, _, utils, fields) {\n  'use strict';\n\n  var LessVariablesView = BaseView.extend({\n    tagName: 'div',\n    className: 'tab-pane lessvariables',\n    template: _.template(\n      '<div class=\"buttons-container\">' +\n        '<div class=\"btn-group pull-right\">' +\n          '<button class=\"plone-btn plone-btn-default add-variable\"><%- _t(\"Add variable\") %></button>' +\n          '<button class=\"plone-btn plone-btn-primary save\"><%- _t(\"Save\") %></button>' +\n        '</div>' +\n      '</div>' +\n      '<div class=\"row clearfix\">' +\n        '<div class=\"form col-md-12\"></div></div>'),\n    events: {\n      'click .plone-btn.save': 'saveClicked',\n      'click .plone-btn.add-variable': 'addVariable'\n    },\n\n    initialize: function(options){\n      BaseView.prototype.initialize.apply(this, [options]);\n      this.loading = this.options.tabView.loading;\n    },\n\n    saveClicked: function(e){\n      e.preventDefault();\n      var self = this;\n      self.options.tabView.saveData('save-less-variables', {\n        data: JSON.stringify(self.options.data.lessvariables)\n      });\n    },\n\n    addVariable: function(e){\n      e.preventDefault();\n      var self = this;\n      self.options.data.lessvariables[utils.generateId('new-variable-')] = '';\n      self.render();\n    },\n\n    inputChanged: function(){\n      var self = this;\n      var data = {};\n      self.$('.form-group').each(function(){\n        data[$(this).find('.field-name').val()] = $(this).find('.field-value').val();\n      });\n     self.options.data.lessvariables = data;\n    },\n\n    afterRender: function(){\n      var self = this;\n      var settings = self.options.data.lessvariables;\n      var $form = self.$('.form');\n      _.each(_.keys(settings), function(name){\n        $form.append((new fields.VariableFieldView({\n          registryData: settings,\n          title: name,\n          name: name,\n          value: settings[name],\n          onChange: function(){\n            self.inputChanged();\n          }\n         }).render().el));\n      });\n    }\n  });\n\n  return LessVariablesView;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/resourceregistry/js/less.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/resourceregistry/js/overrides.js":
/*!********************************************************************!*\
  !*** ./.plone/++resource++mockup/resourceregistry/js/overrides.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mockup-ui-url/views/base */ \"./.plone/++resource++mockupjs/ui/views/base.js\"),\n  __webpack_require__(/*! mockup-patterns-texteditor */ \"./.plone/++resource++mockup/texteditor/pattern.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! mockup-patterns-select2 */ \"./.plone/++resource++mockup/select2/pattern.js\"),\n  __webpack_require__(/*! translate */ \"./.plone/++resource++mockupjs/i18n-wrapper.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, _, BaseView, TextEditor, utils, Select2, _t) {\n  'use strict';\n\n  var OverridesView = BaseView.extend({\n    tagName: 'div',\n    className: 'tab-pane overrides',\n    editing: null,\n    canSave: false,\n    newFile: false,\n\n    template: _.template(\n      '<div class=\"buttons-container\">' +\n        '<div class=\"btn-group pull-right\">' +\n          '<button class=\"plone-btn plone-btn-primary add-file\"><%- _t(\"Add file\") %></button> ' +\n        '</div>' +\n      '</div>' +\n      '<form class=\"row\">' +\n        '<div class=\"col-md-12\">' +\n          '<p><%- _t(\"Only ++plone++ resources are available to override\") %></p>' +\n          '<input class=\"select\" type=\"hidden\" placeholder=\"<%- _t(\"Select resource to override...\") %>\" style=\"width: 100%\" />' +\n        '</div>' +\n      '</form>' +\n      '<div class=\"row\">' +\n        '<div class=\"col-md-12 edit-area\">' +\n          '<% if(view.editing){ %>' +\n            '<p class=\"resource-name text-primary\"><%- view.editing %></p> ' +\n            '<div class=\"plone-btn-group\">' +\n              '<button class=\"plone-btn plone-btn-primary plone-btn-xs\" disabled><%- _t(\"Save\") %></button> ' +\n              '<button class=\"plone-btn plone-btn-default plone-btn-xs\" disabled><%- _t(\"Cancel\") %></button>' +\n              '<button class=\"plone-btn plone-btn-danger plone-btn-xs\"><%- _t(\"Delete customizations\") %></button>' +\n            '</div>' +\n          '<% } %>' +\n          '<div class=\"editor\" />' +\n        '</div>' +\n      '</div>'),\n    events: {\n      'click .edit-area button.plone-btn-danger': 'itemDeleted',\n      'click .edit-area button.plone-btn-primary': 'itemSaved',\n      'click .edit-area button.plone-btn-default': 'itemCancel',\n      'click .plone-btn.add-file': 'addFile'\n    },\n\n    initialize: function(options){\n      BaseView.prototype.initialize.apply(this, [options]);\n      this.tabView = options.tabView;\n    },\n\n    serializedModel: function(){\n      return $.extend({}, { view: this }, this.options);\n    },\n\n    addFile: function(){\n      var resource = window.prompt('Enter full path and filename', '++plone++static/' + _t('you-filename.js'));\n      if(resource.indexOf('++plone++static/') === -1){\n        window.alert(_t('Filename must start with ++plone++static/'));\n      }else{\n        if(this.options.data.overrides.indexOf(resource) === -1){\n          this.options.data.overrides.push(resource);\n        }\n        this.newFile = true;\n        this.editing = resource;\n        this.render();\n      }\n    },\n\n    itemSaved: function(e){\n      e.preventDefault();\n      var that = this;\n      that.tabView.saveData('save-file', {\n        filepath: that.editing,\n        data: that.editor.editor.getValue()\n      }, function(){\n        that.$el.find('.plone-btn-primary,.plone-btn-default').prop('disabled', true);\n      });\n    },\n\n    itemDeleted: function(e){\n      e.preventDefault();\n      var that = this;\n      if(window.confirm('Are you sure you want to delete this override?')){\n        that.options.data.overrides.splice(\n          that.options.data.overrides.indexOf(that.editing), 1);\n        that.tabView.saveData('delete-file', {\n          filepath: that.editing\n        }, function(){\n          that.editing = null;\n          that.render();\n        });\n      }\n    },\n\n    itemCancel: function(e){\n      e.preventDefault();\n      this.editing = null;\n      this.render();\n    },\n\n    customizeResource: function(resource){\n      if(this.options.data.overrides.indexOf(resource) === -1){\n        this.options.data.overrides.push(resource);\n      }\n      this.editing = resource;\n      this.render();\n    },\n\n    afterRender: function(){\n      var that = this;\n      var $select = that.$el.find('.select');\n      var overrides = _.map(that.options.data.overrides, function(override){\n        return {\n          id: override,\n          text: override,\n          override: true\n        };\n      });\n      var resources = _.flatten(_.map(that.options.data.resources, function(resource){\n        var base = resource.url || '';\n        if(base){\n          base += '/';\n        }\n        var items = [];\n        var url;\n        if(resource.js){\n          if(resource.js && resource.js.indexOf('++plone++') !== -1){\n            url = base + resource.js;\n            if(overrides.indexOf(url) === -1){\n              items.push({id: url, text: url});\n            }\n          }\n        }\n        if(resource.css){\n          for(var i=0; i<resource.css.length; i=i+1){\n            url = base + resource.css[i];\n            if(overrides.indexOf(url) === -1 && url.indexOf('++plone++') !== -1){\n              items.push({id: url, text: url});\n            }\n          }\n        }\n        return items;\n      }));\n\n      var format = function(data){\n        if(data.override){\n          return '<span class=\"customized\">' + data.text + ' - ' + _t('customized') + '</span>';\n        }\n        return data.text;\n      };\n      that.select2 = new Select2($select, {\n        data: overrides.concat(_.sortBy(resources, function(d){ return d.id; })),\n        formatResult: format,\n        formatSelection: format\n      });\n\n      $select.on('change', function(){\n        that.customizeResource($select.select2('val'));\n      });\n\n      that.$editorContainer = that.$('.editor');\n      if(that.editing !== null){\n        var url = that.options.data.baseUrl;\n        if(url[url.length - 1] !== '/'){\n          url += '/';\n        }\n        if(that.newFile){\n          that.showEditor('');\n          that.newFile = false;\n        }else{\n          that.tabView.loading.show();\n          $.ajax({\n            // cache busting url\n            url: url + that.editing + '?' + utils.generateId(),\n            dataType: 'text'\n          }).done(function(data){\n            that.showEditor(data);\n          }).fail(function(){\n            window.alert(_t('error loading resource for editing'));\n            that.tabView.loading.hide();\n          });\n        }\n      }\n    },\n\n    showEditor: function(data){\n      var that = this;\n      var $pre = $('<pre class=\"pat-texteditor\" />');\n      $pre.text(data);\n      that.$editorContainer.empty().append($pre);\n      that.editor = new TextEditor($pre, {\n        width: $('.editor').width(),\n        height: 500\n      });\n      that.editor.setSyntax(that.editing);\n      that.tabView.loading.hide();\n      that.editor.editor.on('change', function(){\n        that.$el.find('.plone-btn-primary,.plone-btn-default').prop('disabled', false);\n      });\n    }\n  });\n\n  return OverridesView;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/resourceregistry/js/overrides.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/resourceregistry/js/patternoptions.js":
/*!*************************************************************************!*\
  !*** ./.plone/++resource++mockup/resourceregistry/js/patternoptions.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! mockup-ui-url/views/base */ \"./.plone/++resource++mockupjs/ui/views/base.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! mockup-patterns-resourceregistry-url/js/fields */ \"./.plone/++resource++mockup/resourceregistry/js/fields.js\"),\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, BaseView, _, utils, fields) {\n  'use strict';\n\n  var PatternOptionsView = BaseView.extend({\n    tagName: 'div',\n    className: 'tab-pane patternoptions',\n    template: _.template(\n      '<div class=\"buttons-container\">' +\n        '<div class=\"btn-group pull-right\">' +\n          '<button class=\"plone-btn plone-btn-default add-pattern\"><%- _t(\"Add pattern\") %></button>' +\n          '<button class=\"plone-btn plone-btn-primary save\"><%- _t(\"Save\") %></button>' +\n        '</div>' +\n      '</div>' +\n      '<div class=\"row clearfix\">' +\n        '<div class=\"form col-md-12\"></div></div>'),\n    events: {\n      'click .plone-btn.save': 'saveClicked',\n      'click .plone-btn.add-pattern': 'addPattern'\n    },\n\n    initialize: function(options){\n      BaseView.prototype.initialize.apply(this, [options]);\n      this.loading = this.options.tabView.loading;\n    },\n\n    saveClicked: function(e){\n      e.preventDefault();\n      var self = this;\n      self.options.tabView.saveData('save-pattern-options', {\n        data: JSON.stringify(self.options.data.patternoptions),\n      });\n    },\n\n    addPattern: function(e){\n      e.preventDefault();\n      var self = this;\n      self.options.data.patternoptions[utils.generateId('new-pattern-')] = '';\n      self.render();\n    },\n\n    inputChanged: function(){\n      var self = this;\n      var data = {};\n      self.$('.form-group').each(function(){\n        data[$(this).find('.field-name').val()] = $(this).find('.field-value').val();\n      });\n      self.options.data.patternoptions = data;\n    },\n\n    afterRender: function(){\n      var self = this;\n      var settings = self.options.data.patternoptions;\n      var $form = self.$('.form');\n      _.each(_.keys(settings), function(name){\n        $form.append((new fields.PatternFieldView({\n          registryData: settings,\n          title: name,\n          name: name,\n          value: settings[name],\n          onChange: function(e, field){\n            try{\n              // check that the json is in correct structure\n              $.parseJSON(field.$el.find('.field-value').val());\n              field.$el.removeClass('has-error').removeClass('has-feedback');\n              field.$('.form-control-feedback').addClass('hidden');\n            }catch(err){\n              field.$el.addClass('has-error').addClass('has-feedback');\n              field.$('.form-control-feedback').removeClass('hidden');\n            }\n            self.inputChanged();\n          }\n         }).render().el));\n      });\n    }\n  });\n\n  return PatternOptionsView;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/resourceregistry/js/patternoptions.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/resourceregistry/js/registry.js":
/*!*******************************************************************!*\
  !*** ./.plone/++resource++mockup/resourceregistry/js/registry.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mockup-ui-url/views/base */ \"./.plone/++resource++mockupjs/ui/views/base.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! mockup-patterns-resourceregistry-url/js/fields */ \"./.plone/++resource++mockup/resourceregistry/js/fields.js\"),\n  __webpack_require__(/*! mockup-patterns-resourceregistry-url/js/builder */ \"./.plone/++resource++mockup/resourceregistry/js/builder.js\"),\n  __webpack_require__(/*! translate */ \"./.plone/++resource++mockupjs/i18n-wrapper.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, _, BaseView, utils, fields, Builder, _t) {\n  'use strict';\n\n  var AbstractResourceEntryView = BaseView.extend({\n    tagName: 'div',\n    className: 'resource-entry',\n    template: _.template(\n      '<h3><%- name %></h3>' +\n      '<div class=\"panel-body form-horizontal\">' +\n      '</div>'\n    ),\n\n    serializedModel: function(){\n      return $.extend({}, {name: this.name}, this.options);\n    },\n\n    afterRender: function(){\n      var self = this;\n      var $body = self.$('.panel-body');\n      self.$el.addClass(self.name + '-resource-entry');\n      _.each(self.fields, function(field){\n        var options = $.extend({}, field, {\n          value: self.options.data[field.name],\n          registryData: self.options.data,\n          containerData: self.options.containerData,\n          resourceName: self.options.name,\n          registryView: self.options.registryView,\n          parent: self.options.parent,\n          form: self\n        });\n        if(!options.value){\n          options.value = '';\n        }\n        var View = field.view;\n        if(!View){\n          View = fields.ResourceInputFieldView;\n        }\n        $body.append((new View(options)).render().el);\n      });\n    }\n  });\n\n\n  var ResourceEntryView = AbstractResourceEntryView.extend({\n    fields: [{\n      name: 'name',\n      title: _t('Name'),\n      view: fields.ResourceNameFieldView\n    }, {\n      name: 'url',\n      title: _t('URL'),\n      description: _t('Resources base URL')\n    }, {\n      name: 'js',\n      title: _t('JS'),\n      description: _t('Main JavaScript file')\n    }, {\n      name: 'css',\n      title: _t('CSS/LESS'),\n      description: _t('List of CSS/LESS files to use for resource'),\n      view: fields.ResourceSortableListFieldView\n    },{\n      name: 'init',\n      title: _t('Init'),\n      description: _t('Init instruction for requirejs shim')\n    }, {\n      name: 'deps',\n      title: _t('Dependencies'),\n      description: _t('Comma-separated values of resources for requirejs shim')\n    }, {\n      name: 'export',\n      title: _t('Export'),\n      description: _t('Export vars for requirejs shim')\n    }, {\n      name: 'conf',\n      title: _t('Configuration'),\n      description: _t('Configuration in JSON for the widget'),\n      view: fields.ResourceTextAreaFieldView\n    }]\n  });\n\n\n  var BundleEntryView = AbstractResourceEntryView.extend({\n    fields: [{\n      name: 'name',\n      title: _t('Name'),\n      view: fields.ResourceNameFieldView\n    }, {\n      name: 'resources',\n      title: _t('Resources'),\n      description: _t('A main resource file to bootstrap bundle or a list of resources to load.'),\n      view: fields.BundleResourcesFieldView\n    }, {\n      name: 'depends',\n      title: _t('Depends'),\n      description: _t('Bundle this depends on'),\n      view: fields.BundleDependsFieldView\n    }, {\n      name: 'expression',\n      title: _t('Expression'),\n      description: _t('Conditional expression to decide if this resource will run')\n    }, {\n      name: 'enabled',\n      title: _t('Enabled'),\n      view: fields.ResourceBoolFieldView\n    }, {\n      name: 'conditionalcomment',\n      title: _t('Conditional comment'),\n      description: _t('Internet Explorer conditional comment')\n    }, {\n      name: 'load_async',\n      title: _t('Load JavaScript asynchronously?'),\n      view: fields.ResourceBoolFieldView\n    }, {\n      name: 'load_defer',\n      title: _t('Load JavaScript deferred?'),\n      view: fields.ResourceBoolFieldView\n    }, {\n      name: 'compile',\n      title: _t('Does your bundle contain any RequireJS or LESS files?'),\n      view: fields.ResourceBoolFieldView\n    }, {\n      name: 'merge_with',\n      title: _t('Merge with'),\n      description: _t('In production, the bundle is merged together with others. Select which one here.'),\n      view: fields.MergeWithFieldView\n    }, {\n      name: 'last_compilation',\n      title: _t('Last compilation'),\n      description: _t('Date/Time when your bundle was last compiled. Empty, if it was never compiled.')\n    }, {\n      name: 'jscompilation',\n      title: _t('Compiled JavaScript'),\n      description: _t('Automatically generated path to the compiled JavaScript.')\n    }, {\n      name: 'csscompilation',\n      title: _t('Compiled CSS'),\n      description: _t('Automatically generated path to the compiled CSS.')\n    }, {\n      name: 'stub_js_modules',\n      title: _t('Stub JS Modules'),\n      description: _t('Define list of modules that will be not be defined empty ' +\n                      'on RequireJS build steps to prevent loading modules multiple times.'),\n      view: fields.ResourceSortableListFieldView\n    }]\n  });\n\n\n  var RegistryResourceListItem = BaseView.extend({\n    tagName: 'li',\n    type: 'resource',\n    className: 'list-group-item',\n    template: _.template(\n      '<a href=\"#\"><%- name %></a> ' +\n      '<button class=\"pull-right plone-btn plone-btn-danger delete plone-btn-xs\"><%- _t(\"Delete\") %></button>'\n    ),\n    events: {\n      'click a': 'editResource',\n      'click button.delete': 'deleteClicked'\n    },\n    defaults: {\n      develop_javascript: false,\n      develop_css: false,\n      compile: true\n    },\n    afterRender: function(){\n      this.$el.attr('data-name', this.options.name);\n      this.$el.addClass(this.type + '-list-item-' + this.options.name);\n    },\n    serializedModel: function(){\n      return $.extend({}, this.defaults, {\n        name: this.options.name,\n        view: this.options.registryView\n      }, this.options.data);\n    },\n    editResource: function(e){\n      if(e){\n        e.preventDefault();\n      }\n      var options = $.extend({}, this.options, {\n        containerData: this.options.registryView.options.data.resources,\n        parent: this\n      });\n      var resource = new ResourceEntryView(options);\n      this.registryView.showResourceEditor(resource, this, 'resource');\n\n      // and scroll to resource since huge list makes this hard to notice\n      $('html, body').animate({\n        scrollTop: resource.$el.offset().top\n      }, 1000);\n    },\n    deleteClicked: function(e){\n      e.preventDefault();\n      if(window.confirm(_t('Are you sure you want to delete the ${name} resource?', {name: this.options.name}))){\n        delete this.options.registryView.options.data.resources[this.options.name];\n        this.options.registryView.dirty = true;\n        if(this.options.registryView.activeResource &&\n           this.options.registryView.activeResource.resource.name === this.options.name){\n          this.options.registryView.activeResource = null;\n        }\n        this.options.registryView.render();\n      }\n    }\n  });\n\n\n  var RegistryBundleListItem = RegistryResourceListItem.extend({\n    type: 'bundle',\n    active: false,\n    template: _.template(\n      '<a href=\"#\"><%- name %></a> ' +\n      '<div class=\"actions\">' +\n        '<div class=\"plone-btn-group\">' +\n          '<% if(view.options.data.development) { %>' +\n            '<% if(develop_javascript){ %>' +\n              '<button class=\"plone-btn plone-btn-warning on develop-js plone-btn-xs\"><%- _t(\"Stop Developing JavaScript\") %></button>' +\n            '<% } else { %>' +\n              '<button class=\"plone-btn plone-btn-default develop-js plone-btn-xs\"><%- _t(\"Develop JavaScript\") %></button>' +\n            '<% } %>' +\n            '<% if(develop_css){ %>' +\n              '<button class=\"plone-btn plone-btn-warning on develop-css plone-btn-xs\"><%- _t(\"Stop Developing CSS\") %></button>' +\n            '<% } else { %>' +\n              '<button class=\"plone-btn plone-btn-default develop-css plone-btn-xs\"><%- _t(\"Develop CSS\") %></button>' +\n            '<% } %>' +\n          '<% } %>' +\n          '<% if(compile){ %>' +\n            '<button class=\"plone-btn plone-btn-default build plone-btn-xs\"><%- _t(\"Build\") %></button>' +\n          '<% } %>' +\n          '<button class=\"plone-btn plone-btn-danger delete plone-btn-xs\"><%- _t(\"Delete\") %></button>' +\n        '</div>' +\n      '</div>'\n    ),\n    events: $.extend({}, RegistryResourceListItem.prototype.events, {\n      'click button.build': 'buildClicked',\n      'click button.develop-js': 'developJavaScriptClicked',\n      'click button.develop-css': 'developCSSClicked'\n    }),\n    developJavaScriptClicked: function(e){\n      e.preventDefault();\n      this.options.data.develop_javascript = !this.options.data.develop_javascript;\n      this.options.registryView.dirty = true;\n      this.options.registryView.render();\n      this.render();\n    },\n    developCSSClicked: function(e){\n      e.preventDefault();\n      this.options.data.develop_css = !this.options.data.develop_css;\n      this.options.registryView.dirty = true;\n      this.options.registryView.render();\n      this.render();\n    },\n    afterRender: function(){\n      RegistryResourceListItem.prototype.afterRender.apply(this);\n      if(this.active){\n        this.editResource();\n      }\n    },\n    editResource: function(e){\n      if(e){\n        e.preventDefault();\n      }\n      var options = $.extend({}, this.options, {\n        containerData: this.options.registryView.options.data.bundles\n      });\n      var resource = new BundleEntryView(options);\n      this.registryView.showResourceEditor(resource, this, 'bundle');\n\n      // only one can be edited at a time, deactivate\n      _.each(this.options.registryView.items.bundles, function(bundleItem){\n        bundleItem.active = false;\n      });\n      this.active = true;\n      this.$el.parent().find('.list-group-item').removeClass('active');\n      this.$el.addClass('active');\n    },\n    deleteClicked: function(e){\n      e.preventDefault();\n      if(window.confirm(_t('Are you sure you want to delete the ${name} bundle?', {name: this.options.name}))){\n        delete this.options.registryView.options.data.bundles[this.options.name];\n        this.options.registryView.dirty = true;\n        if(this.options.registryView.activeResource &&\n           this.options.registryView.activeResource.resource.name === this.options.name){\n          this.options.registryView.activeResource = null;\n        }\n        this.options.registryView.render();\n      }\n    },\n\n    buildClicked: function(e){\n      e.preventDefault();\n      var self = this;\n      if(this.options.registryView.dirty){\n        window.alert(_t('You have unsaved changes. Save or discard before building.'));\n      }else{\n        var builder = new Builder(self.options.name, self);\n        builder.run();\n      }\n    }\n  });\n\n  var BaseResourcesPane = BaseView.extend({\n    tagName: 'div',\n    className: 'tab-pane',\n    $form: null,\n    activeResource: null,\n\n    initialize: function(options) {\n      var self = this;\n      BaseView.prototype.initialize.apply(self, [options]);\n      self.previousData = self._copyData();\n      /* setup scroll spy to move form into view if necessary */\n      /* disabled, at least for now, forms too bad to do this with...\n      $(window).scroll(function(){\n        if(self.$form){\n          var offset = self.$el.parent().offset();\n          var top = $(document).scrollTop();\n          if(top > offset.top){\n            self.$form.css({marginTop: top - offset.top});\n          }else{\n            self.$form.css({marginTop: null});\n          }\n        }\n      });\n      */\n    },\n\n    showResourceEditor: function(resource, view, type){\n      this.activeResource = {\n        resource: resource,\n        item: view,\n        type: type\n      };\n      this.$form.empty().append(resource.render().el);\n    },\n\n    _copyData: function(){\n      return $.extend(true, {}, this.options.data);\n    },\n\n    _revertData: function(data){\n      this.options.data = $.extend(true, {}, data);\n    },\n\n    revertChanges: function(e){\n      if(e){\n        e.preventDefault();\n      }\n      if(window.confirm(_t('Are you sure you want to cancel? You will lose all changes.'))){\n        this._revertData(this.previousData);\n        this.activeResource = null;\n        this.render();\n      }\n    },\n    afterRender: function(){\n      this.$form = this.$('.form');\n      this.loading = this.options.tabView.loading;\n    }\n  });\n\n\n  var RegistryView = BaseResourcesPane.extend({\n    template: _.template(\n      '<div class=\"row buttons-container\">' +\n        '<div class=\"plone-btn-group pull-right\">' +\n          '<button class=\"plone-btn plone-btn-primary save\"><%- _t(\"Save\") %></button>' +\n          '<button class=\"plone-btn plone-btn-default cancel\"><%- _t(\"Cancel\") %></button>' +\n        '</div>' +\n        '<div class=\"plone-btn-group pull-right\">' +\n          '<button class=\"plone-btn plone-btn-default add-bundle\"><%- _t(\"Add bundle\") %></button>' +\n          '<button class=\"plone-btn plone-btn-default add-resource\"><%- _t(\"Add resource\") %></button>' +\n        '</div>' +\n      '</div>' +\n      '<div class=\"row\">' +\n        '<div class=\"checkbox development-mode\">' +\n          '<label>' +\n            '<input type=\"checkbox\" ' +\n              '<% if(data.development){ %> checked=\"checked\" <% } %>' +\n              ' > <%- _t(\"Development Mode(only logged in users)\") %>' +\n          '</label>' +\n        '</div>' +\n      '</div>' +\n      '<div class=\"row\">' +\n        '<div class=\"items col-md-5\">' +\n          '<ul class=\"bundles list-group\">' +\n            '<li class=\"list-group-item list-group-item-warning\"><%- _t(\"Bundles\") %></li>' +\n          '</ul>' +\n          '<ul class=\"resources-header list-group\">' +\n            '<li class=\"list-group-item list-group-item-warning\"><%- _t(\"Resources\") %> ' +\n              '<input class=\"float-right form-control input-xs\" ' +\n                      'placeholder=\"<%- _t(\"Filter...\") %>\" />' +\n            '</li>' +\n          '</ul>' +\n          '<ul class=\"resources list-group\">' +\n          '</ul>' +\n        '</div>' +\n        '<div class=\"form col-md-7\"></div>' +\n      '</div>'),\n    events: {\n      'click button.save': 'saveClicked',\n      'click button.add-resource': 'addResourceClicked',\n      'click button.add-bundle': 'addBundleClicked',\n      'click button.cancel': 'revertChanges',\n      'keyup .resources-header input': 'filterResources',\n      'change .development-mode input': 'developmentModeChanged'\n    },\n    filterTimeout: 0,\n    dirty: false,\n\n    initialize: function(options){\n      var self = this;\n      BaseResourcesPane.prototype.initialize.apply(self, [options]);\n      $(document).on('resource-data-changed', function(){\n        self.dirty = true;\n        self.showHideButtons();\n      });\n    },\n\n    showHideButtons: function(){\n      var val = true;\n      if(this.dirty){\n        val = false;\n      }\n      this.$('button.save').prop('disabled', val);\n      this.$('button.cancel').prop('disabled', val);\n    },\n\n    filterResources: function(){\n      var self = this;\n      if(self.filterTimeout){\n        clearTimeout(self.filterTimeout);\n      }\n      self.filterTimeout = setTimeout(function(){\n        var filterText = self.$('.resources-header input').val().toLowerCase();\n        var $els = self.$('.resources .list-group-item');\n        if(!filterText || filterText.length < 3){\n          $els.removeClass('hidden');\n        }else{\n          $els.each(function(){\n            var $el = $(this);\n            if($el.find('a').html().toLowerCase().indexOf(filterText) !== -1){\n              $el.removeClass('hidden');\n            }else{\n              $el.addClass('hidden');\n            }\n          });\n        }\n      }, 200);\n    },\n\n    _copyData: function(){\n      return $.extend(true, {}, {\n        bundles: this.options.data.bundles,\n        resources: this.options.data.resources\n      });\n    },\n\n    _revertData: function(data){\n      this.options.data.bundles = $.extend(true, {}, data.bundles);\n      this.options.data.resources = $.extend(true, {}, data.resources);\n      this.dirty = false;\n    },\n\n    afterRender: function(){\n      var self = this;\n      self.showHideButtons();\n      self.$bundles = self.$('ul.bundles');\n      self.$resources = self.$('ul.resources');\n      var data = self.options.data;\n      var bundles = _.sortBy(_.keys(data.bundles), function(v){ return v.toLowerCase(); });\n      self.items = {\n        bundles: {},\n        resources: {}\n      };\n      _.each(bundles, function(resourceName){\n        var item;\n        if(self.activeResource && self.activeResource.type === 'bundle' &&\n           self.activeResource.item.options.name === resourceName){\n          item = new RegistryBundleListItem({\n            data: self.activeResource.item.data,\n            name: resourceName,\n            registryView: self});\n        }else{\n          item = new RegistryBundleListItem({\n            data: data.bundles[resourceName],\n            name: resourceName,\n            registryView: self});\n        }\n        self.items.bundles[resourceName] = item;\n        self.$bundles.append(item.render().el);\n      });\n      var resources = _.sortBy(_.keys(data.resources), function(v){ return v.toLowerCase(); });\n      _.each(resources, function(resourceName){\n        var item;\n        if(self.activeResource && self.activeResource.type === 'resource' &&\n           self.activeResource.item.options.name === resourceName){\n          item = new RegistryResourceListItem({\n            data: self.activeResource.item.data,\n            name: resourceName,\n            registryView: self});\n        } else {\n          item = new RegistryResourceListItem({\n            data: data.resources[resourceName],\n            name: resourceName,\n            registryView: self});\n        }\n        self.items.resources[resourceName] = item;\n        self.$resources.append(item.render().el);\n      });\n      BaseResourcesPane.prototype.afterRender.apply(self);\n\n      // finally, show edit pane if there is an active resource\n      if(self.activeResource){\n        self.showResourceEditor(self.activeResource.resource, self.activeResource.item, self.activeResource.type);\n      }\n      return self;\n    },\n\n    addResourceClicked: function(e){\n      e.preventDefault();\n      var name = utils.generateId('new-resource-');\n      this.options.data.resources[name] = {\n        enabled: true\n      };\n      this.dirty = true;\n      this.render();\n      this.items.resources[name].editResource();\n    },\n\n    addBundleClicked: function(e){\n      e.preventDefault();\n      var name = utils.generateId('new-bundle-');\n      this.options.data.bundles[name] = {\n        enabled: true\n      };\n      this.dirty = true;\n      this.render();\n      this.items.bundles[name].editResource();\n    },\n\n    saveClicked: function(e){\n      var self = this;\n      e.preventDefault();\n      self.options.tabView.saveData('save-registry', {\n        resources: JSON.stringify(self.options.data.resources),\n        bundles: JSON.stringify(self.options.data.bundles),\n        development: self.options.data.development && 'true' || 'false'\n      }, function(){\n        self.dirty = false;\n        var activeResource = self.activeResource;\n        self.activeResource = null;\n        self.previousData = self._copyData();\n        self.render();\n        if(activeResource){\n          var name = activeResource.resource.name;\n          self.options.data.resources[name] = {\n            enabled: true\n          };\n          if(activeResource.type === 'bundle'){\n            self.items.bundles[name].editResource();\n          }else{\n            self.items.resources[name].editResource();\n          }\n        }\n      });\n    },\n\n    developmentModeChanged: function(){\n      var self = this;\n      if(self.$('.development-mode input')[0].checked){\n        this.options.data.development = true;\n      }else{\n        this.options.data.development = false;\n      }\n      this.dirty = true;\n      this.render();\n    }\n  });\n\n  return RegistryView;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/resourceregistry/js/registry.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/resourceregistry/pattern.js":
/*!***************************************************************!*\
  !*** ./.plone/++resource++mockup/resourceregistry/pattern.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Resource Registry pattern.\n *\n * Options:\n *    bundles(object): object with all bundles ({})\n *    resources(object): object with all resources ({})\n *    javascripts(object): object with all legacy type javascripts ({})\n *    css(object): object with all legacy type css ({}) \n *    overrides(array): List of current overrides ([])\n *    managerUrl(string): url to handle manage actions(null)\n *    baseUrl(string): to render resources from(null)\n *    lesscUrl(string): url to lessc to load for compiling less(null)\n *    rjsUrl(string): url to lessc to load for compiling less(null)\n *    lessvariables(object): group of settings that can be configured({})\n *\n *\n * Documentation:\n *    # Defaults\n *\n *    {{ example-1 }}\n *\n *\n * Example: example-1\n *    <div class=\"pat-resourceregistry\"\n *        data-pat-resourceregistry='{\"bundles\":{\n *                                     \"plone\": {\n *                                       \"resources\": [\"plone\"], \"depends\": \"\",\n *                                       \"expression\": \"\", \"enabled\": true, \"conditionalcomment\": \"\",\n *                                       \"develop_javascript\": false, \"develop_css\": false,\n *                                       \"compile\": true\n *                                     },\n *                                     \"plone-auth\": {\n *                                       \"resources\": [\"plone-auth\"], \"depends\": \"plone\",\n *                                       \"expression\": \"\", \"enabled\": true, \"conditionalcomment\": \"\",\n *                                       \"develop_javascript\": false, \"develop_css\": false,\n *                                       \"compile\": true\n *                                     },\n *                                     \"barceloneta\": {\n *                                       \"resources\": [\"barceloneta\"], \"depends\": \"*\",\n *                                       \"expression\": \"\", \"enabled\": true, \"conditionalcomment\": \"\",\n *                                       \"develop_javascript\": false, \"develop_css\": false,\n *                                       \"compile\": false\n *                                     }\n *                                   },\n *                                   \"resources\": {\n *                                     \"plone\": {\n *                                       \"url\": \"js/bundles\", \"js\": \"plone.js\",\n *                                       \"css\": [], \"deps\": \"\", \"export\": \"\",\n *                                       \"conf\": \"\", \"force\": false\n *                                     },\n *                                     \"plone-auth\": {\n *                                       \"url\": \"js/bundles\", \"js\": \"plone-auth.js\",\n *                                       \"css\": [], \"deps\": \"\", \"export\": \"\",\n *                                       \"conf\": \"\", \"force\": false\n *                                     },\n *                                     \"barceloneta\": {\n *                                       \"url\": \"js/bundles\", \"js\": \"barceloneta.js\",\n *                                       \"css\": [\"barceloneta.less\"], \"deps\": \"\", \"export\": \"\",\n *                                       \"conf\": \"\", \"force\": false\n *                                     },\n *                                     \"modal\": {\n *                                       \"url\": \"patterns/modal\", \"js\": \"pattern.js\",\n *                                       \"css\": [\"pattern.modal.less\"], \"deps\": \"\", \"export\": \"\",\n *                                       \"conf\": \"\", \"force\": false\n *                                     },\n *                                     \"autotoc\": {\n *                                       \"url\": \"patterns/autotoc\", \"js\": \"pattern.js\",\n *                                       \"css\": [\"pattern.autotoc.less\", \"pattern.other.less\"],\n *                                       \"deps\": \"\", \"export\": \"\", \"conf\": \"\"\n *                                     },\n *                                     \"pickadate\": {\n *                                       \"url\": \"patterns/pickadate\", \"js\": \"pattern.js\",\n *                                       \"css\": [\"pattern.pickadate.less\"], \"deps\": \"\", \"export\": \"\",\n *                                       \"conf\": \"\", \"force\": true\n *                                     }\n *                                   },\n *                                   \"lessvariables\": {\n *                                     \"foo\": \"bar\"\n *                                   },\n *                                   \"overrides\": [\"patterns/pickadate/pattern.js\"],\n *                                   \"baseUrl\": \"/resources-registry\",\n *                                   \"manageUrl\": \"/registry-manager\",\n *                                   \"lessUrl\": \"node_modules/less/dist/less-1.7.4.min.js\",\n *                                   \"lessConfigUrl\": \"tests/files/lessconfig.js\",\n *                                   \"rjsUrl\": \"tests/files/r.js\"}'>\n *    </div>\n *\n */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mockup-ui-url/views/base */ \"./.plone/++resource++mockupjs/ui/views/base.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! mockup-patterns-resourceregistry-url/js/less */ \"./.plone/++resource++mockup/resourceregistry/js/less.js\"),\n  __webpack_require__(/*! mockup-patterns-resourceregistry-url/js/overrides */ \"./.plone/++resource++mockup/resourceregistry/js/overrides.js\"),\n  __webpack_require__(/*! mockup-patterns-resourceregistry-url/js/registry */ \"./.plone/++resource++mockup/resourceregistry/js/registry.js\"),\n  __webpack_require__(/*! mockup-patterns-resourceregistry-url/js/patternoptions */ \"./.plone/++resource++mockup/resourceregistry/js/patternoptions.js\"),\n  __webpack_require__(/*! translate */ \"./.plone/++resource++mockupjs/i18n-wrapper.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, Base, _, BaseView, utils, LessVariablesView,\n            OverridesView,RegistryView, PatternOptionsView, _t) {\n  'use strict';\n\n  var TabView = BaseView.extend({\n    tagName: 'div',\n    activeTab: 'registry',\n    template: _.template('' +\n      '<div class=\"autotabs\">' +\n        '<ul class=\"main-tabs autotoc-nav\" role=\"tablist\">' +\n          '<li class=\"registry-btn\"><a href=\"#\"><%- _t(\"Registry\") %></a></li>' +\n          '<li class=\"overrides-btn\"><a href=\"#\"><%- _t(\"Overrides\") %></a></li>' +\n          '<li class=\"lessvariables-btn\"><a href=\"#\"><%- _t(\"Less Variables\") %></a></li>' +\n          '<li class=\"patternoptions-btn\"><a href=\"#\"><%- _t(\"Pattern Options\") %></a></li>' +\n        '</ul>' +\n      '</div>' +\n      '<div class=\"tab-content\" />'\n    ),\n    events: {\n      'click .registry-btn a': 'hideShow',\n      'click .overrides-btn a': 'hideShow',\n      'click .lessvariables-btn a': 'hideShow',\n      'click .patternoptions-btn a': 'hideShow'\n    },\n    hideShow: function(e){\n      var self = this;\n      if(e !== undefined){\n        e.preventDefault();\n        self.activeTab = $(e.target).parent()[0].className.replace('-btn', '');\n      }\n      self.$('.main-tabs > li a').removeClass('active');\n      self.$content.find('.tab-pane').removeClass('active');\n      self.tabs[self.activeTab].btn.find('a').addClass('active');\n      self.tabs[self.activeTab].content.addClass('active');\n    },\n    initialize: function(options) {\n      var self = this;\n\n      BaseView.prototype.initialize.apply(self, [options]);\n      self.registryView = new RegistryView({\n        data: options,\n        tabView: self});\n      self.overridesView = new OverridesView({\n        data: options,\n        tabView: self});\n      self.lessvariablesView = new LessVariablesView({\n        data: options,\n        tabView: self});\n      self.patternoptionsView = new PatternOptionsView({\n        data: options,\n        tabView: self});\n      self.tabs = {};\n    },\n\n    render: function(){\n      var self = this;\n      self.$el.append(self.template({_t: _t}));\n      self.loading = new utils.Loading();\n      self.$tabs = self.$('ul.main-tabs');\n      self.$content = self.$('.tab-content');\n      self.$content.append(self.registryView.render().el);\n      self.$content.append(self.overridesView.render().el);\n      self.$content.append(self.lessvariablesView.render().el);\n      self.$content.append(self.patternoptionsView.render().el);\n      self.tabs = {\n        registry: {\n          btn: self.$('.registry-btn'),\n          content: self.registryView.$el\n        },\n        overrides: {\n          btn: self.$('.overrides-btn'),\n          content: self.overridesView.$el\n        },\n        lessvariables: {\n          btn: self.$('.lessvariables-btn'),\n          content: self.lessvariablesView.$el\n        },\n        patternoptions: {\n          btn: self.$('.patternoptions-btn'),\n          content: self.patternoptionsView.$el\n        }\n      };\n      self.hideShow();\n      return self;\n    },\n\n    saveData: function(action, data, onSave, onError){\n      var self = this;\n      self.loading.show();\n      if(!data){\n        data = {};\n      }\n      data = $.extend({}, data, {\n        action: action,\n        _authenticator: utils.getAuthenticator()\n      });\n      $.ajax({\n        url: self.options.manageUrl,\n        type: 'POST',\n        dataType: 'json',\n        data: data\n      }).done(function(resp){\n        if(onSave){\n          onSave(resp);\n        }\n        if(resp.success !== undefined && !resp.success && resp.msg){\n          window.alert(resp.msg);\n        }\n      }).always(function(){\n        self.loading.hide();\n      }).fail(function(resp){\n        if(onError){\n          onError(resp);\n        }else{\n          window.alert(_t('Error processing ajax request for action: ') + action);\n        }\n      });\n    }\n  });\n\n\n  var ResourceRegistry = Base.extend({\n    name: 'resourceregistry',\n    trigger: '.pat-resourceregistry',\n    parser: 'mockup',\n    defaults: {\n      bundles: {},\n      resources: {},\n      javascripts: {},\n      css: {},\n      overrides: [],\n      manageUrl: null,\n      baseUrl: null,\n      rjsUrl: null,\n      lessvariables: {},\n      patternoptions: {}\n    },\n    init: function() {\n      var self = this;\n      self.$el.empty();\n      self.tabs = new TabView(self.options);\n      self.$el.append(self.tabs.render().el);\n    }\n  });\n\n  return ResourceRegistry;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/resourceregistry/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/sortable/pattern.js":
/*!*******************************************************!*\
  !*** ./.plone/++resource++mockup/sortable/pattern.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Sortable pattern.\n *\n * Options:\n *    selector(string): Selector to use to draggable items in pattern ('li')\n *    dragClass(string): Class to apply to original item that is being dragged. ('item-dragging')\n *    cloneClass(string): Class to apply to cloned item that is dragged. ('dragging')\n *    drop(function, string): Callback function or name of callback function in global namespace to be called when item is dropped ('')\n *\n * Documentation:\n *    # Default\n *\n *    {{ example-1 }}\n *\n *    # Table\n *\n *    {{ example-2 }}\n *\n * Example: example-1\n *    <ul class=\"pat-sortable\">\n *      <li>One</li>\n *      <li>Two</li>\n *      <li>Three</li>\n *    </ul>\n *\n * Example: example-2\n *    <table class=\"table table-stripped pat-sortable\"\n *           data-pat-sortable=\"selector:tr;\">\n *      <tbody>\n *        <tr>\n *          <td>One One</td>\n *          <td>One Two</td>\n *        </tr>\n *        <tr>\n *          <td>Two One</td>\n *          <td>Two Two</td>\n *        </tr>\n *        <tr>\n *          <td>Three One</td>\n *          <td>Three Two</td>\n *        </tr>\n *      </tbody>\n *    </table>\n *\n */\n\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\"),\n  __webpack_require__(/*! jquery.event.drop */ \"./.plone/++resource++mockuplib/jquery.event.drop.js\"),\n  __webpack_require__(/*! jquery.event.drag */ \"./.plone/++resource++mockuplib/jquery.event.drag.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, Base, drop) {\n  'use strict';\n\n  var SortablePattern = Base.extend({\n    name: 'sortable',\n    trigger: '.pat-sortable',\n    parser: 'mockup',\n    defaults: {\n      selector: 'li',\n      dragClass: 'item-dragging',\n      cloneClass: 'dragging',\n      createDragItem: function(pattern, $el){\n        return $el.clone().\n          addClass(pattern.options.cloneClass).\n          css({opacity: 0.75, position: 'absolute'}).appendTo(document.body);\n      },\n      drop: undefined  // callback function or name of global function\n    },\n    init: function() {\n      var self = this;\n      var start = 0;\n\n      self.$el.find(self.options.selector).drag('start', function(e, dd) {\n        var dragged = this;\n        var $el = $(this);\n        $(dragged).addClass(self.options.dragClass);\n        drop({\n          tolerance: function(event, proxy, target) {\n            if ($(target.elem).closest(self.$el).length === 0) {\n              /* prevent dragging conflict over another drag area */\n              return;\n            }\n            var test = event.pageY > (target.top + target.height / 2);\n            $.data(target.elem, 'drop+reorder', test ? 'insertAfter' : 'insertBefore' );\n            return this.contains(target, [event.pageX, event.pageY]);\n          }\n        });\n        start = $el.index();\n        return self.options.createDragItem(self, $el);\n      })\n      .drag(function(e, dd) {\n        /*jshint eqeqeq:false */\n        $( dd.proxy ).css({\n          top: dd.offsetY,\n          left: dd.offsetX\n        });\n        var drop = dd.drop[0],\n            method = $.data(drop || {}, 'drop+reorder');\n        /* XXX Cannot use triple equals here */\n        if (method && drop && (drop != dd.current || method != dd.method)) {\n          $(this)[method](drop);\n          dd.current = drop;\n          dd.method = method;\n          dd.update();\n        }\n      })\n      .drag('end', function(e, dd) {\n        var $el = $(this);\n        $el.removeClass(self.options.dragClass);\n        $(dd.proxy).remove();\n          if (self.options.drop) {\n            if (typeof self.options.drop === 'string') {\n              window[self.options.drop]($el, $el.index() - start);\n            } else {\n              self.options.drop($el, $el.index() - start);\n            }\n        }\n      })\n      .drop('init', function(e, dd ) {\n        /*jshint eqeqeq:false */\n        /* XXX Cannot use triple equals here */\n        return (this == dd.drag) ? false: true;\n      });\n\n    }\n  });\n\n  return SortablePattern;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/sortable/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/texteditor/pattern.js":
/*!*********************************************************!*\
  !*** ./.plone/++resource++mockup/texteditor/pattern.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/\nvar ace = __webpack_require__(/*! ace */ \"./node_modules/brace/index.js\");\nvar _a = __webpack_require__(/*! ace/mode/javascript */ \"./node_modules/brace/mode/javascript.js\");\nvar _b = __webpack_require__(/*! ace/mode/text */ \"./node_modules/brace/mode/text.js\");\nvar _c = __webpack_require__(/*! ace/mode/css */ \"./node_modules/brace/mode/css.js\");\nvar _d = __webpack_require__(/*! ace/mode/html */ \"./node_modules/brace/mode/html.js\");\nvar _e = __webpack_require__(/*! ace/mode/xml */ \"./node_modules/brace/mode/xml.js\");\nvar _f = __webpack_require__(/*! ace/mode/less */ \"./node_modules/brace/mode/less.js\");\nvar _g = __webpack_require__(/*! ace/mode/python */ \"./node_modules/brace/mode/python.js\");\nvar _h = __webpack_require__(/*! ace/mode/xml */ \"./node_modules/brace/mode/xml.js\");\nvar _i = __webpack_require__(/*! ace/mode/ini */ \"./node_modules/brace/mode/ini.js\");\nvar _j = __webpack_require__(/*! ace/theme/monokai */ \"./node_modules/brace/theme/monokai.js\");\n\n/* Text editor pattern\n *\n * Options:\n *    theme(string): Theme to use with editor. defaults to whatever it ships with. (null)\n *    mode(string): What type of syntax is it? ('text')\n *    width(integer): Width of the editor. (500)\n *    height(integer): Height of the editor. (200)\n *    tabSize(integer): TODO (4)\n *    softTabs(boolean): Use spaces for tabs. (true)\n *    wrapMode(boolean): Wrap text. (false)\n *    showGutter(boolean): TODO (true),\n *    showPrintMargin(boolean): Show print margin. (false)\n *    readOnly(boolean): Read only editor. (false)\n *\n * Documentation:\n *    # Default\n *\n *    {{ example-1 }}\n *\n *    # Different theme\n *\n *    {{ example-2 }}\n *\n *    # Different options\n *\n *    {{ example-3 }}\n *\n * Example: example-1\n *    <pre class=\"pat-texteditor\" data-pat-texteditor=\"theme:clouds\">\n *    foobar\n *    </pre>\n *\n * Example: example-2\n *    <pre class=\"pat-texteditor\" data-pat-texteditor=\"mode:javascript;theme:dawn;\">\n *    var foo = 'bar';\n *    function foobar() {\n *      return foo;\n *    }\n *    </pre>\n *\n * Example: example-3\n *    <pre class=\"pat-texteditor\"\n *         data-pat-texteditor=\"mode:javascript;\n *                       theme:ambiance;\n *                       tabSize:2;\n *                       showGutter:false;\n *                       showPrintMargin:true;\">\n *    var foo = 'bar';\n *    function foobar() {\n *      return foo;\n *    }\n *    </pre>\n *\n */\n\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! ace */ \"./node_modules/brace/index.js\"),\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, Base, utils) {\n  'use strict';\n\n  var AcePattern = Base.extend({\n    name: 'texteditor',\n    trigger: '.pat-texteditor',\n    parser: 'mockup',\n    defaults: {\n      theme: null,\n      mode: 'text',\n      width: 500,\n      height: 200,\n      tabSize: 4,\n      softTabs: true,\n      wrapMode: false,\n      showGutter: true,\n      showPrintMargin: false,\n      readOnly: false\n    },\n    init: function() {\n      var self = this;\n      if (!window.ace){\n        // XXX hack...\n        // wait, try loading later\n        setTimeout(function() {\n          self.init();\n        }, 200);\n        return;\n      }\n      var ace = window.ace;\n\n      ace.config.set(\"packaged\", true);\n      ace.config.set(\"basePath\", \"++plone++static/components/ace-builds/src/\");\n\n      // set id on current element\n      var id = utils.setId(self.$el);\n      self.$wrapper = $('<div class=\"editorWrapper\" />').css({\n        height: parseInt(self.options.height) + 25, // weird sizing issue here...\n        width: self.options.width,\n        position: 'relative'\n      });\n      if( !self.$el.parent().hasClass('editorWrapper') ) {\n          self.$el.wrap(self.$wrapper);\n      }\n      self.$el.css({\n        width: self.options.width,\n        height: self.options.height,\n        position: 'absolute'\n      });\n\n      self.editor = ace.edit(id);\n      if (self.options.theme) {\n        self.setTheme(self.options.theme);\n      }\n      self.editor.getSession().setMode('ace/mode/' + self.options.mode);\n      self.editor.getSession().setTabSize(parseInt(self.options.tabSize, 10));\n      self.editor.getSession().setUseSoftTabs(utils.bool(self.options.softTabs));\n      self.editor.getSession().setUseWrapMode(utils.bool(self.options.wrapMode));\n      self.editor.renderer.setShowGutter(utils.bool(self.options.showGutter));\n      self.editor.setShowPrintMargin(utils.bool(self.options.showPrintMargin));\n      self.editor.setReadOnly(utils.bool(self.options.readOnly));\n    },\n    setSyntax: function(name)\n    {\n      var self = this;\n      var modes = {\n        'js': 'javascript',\n        'txt': 'text',\n        'css': 'css',\n        'html': 'html',\n        'xml': 'xml',\n        'less': 'less',\n        'py': 'python',\n        'pt': 'xml',\n        'cfg': 'ini'\n      };\n\n      var extension = name.substr(name.lastIndexOf('.') + 1);\n      var mode = modes[extension];\n\n      if (mode !== undefined){\n        self.editor.getSession().setMode('ace/mode/' + mode);\n        return true;\n      }\n    },\n    setTheme: function(theme) {\n      var self = this;\n      self.editor.setTheme('ace/theme/' + theme);\n    },\n    setText: function(data) {\n      var self = this;\n      if(self.editor){\n        self.editor.setValue(data);\n      }\n    }\n  });\n\n  return AcePattern;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/texteditor/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockupjs/ui/views/base.js":
/*!******************************************************!*\
  !*** ./.plone/++resource++mockupjs/ui/views/base.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! backbone */ \"./.plone/++plone++static/components/backbone/backbone.js\"),\n  __webpack_require__(/*! translate */ \"./.plone/++resource++mockupjs/i18n-wrapper.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, _, Backbone, _t) {\n  'use strict';\n\n  var BaseView = Backbone.View.extend({\n    isUIView: true,\n    eventPrefix: 'ui',\n    template: null,\n    idPrefix: 'base-',\n    appendInContainer: true,\n    initialize: function(options) {\n      this.options = options;\n      for (var key in this.options) {\n        this[key] = this.options[key];\n      }\n      this.options._t = _t;\n    },\n    render: function() {\n      this.applyTemplate();\n\n      this.trigger('render', this);\n      this.afterRender();\n\n      if (this.options.id) {\n        // apply id to element\n        this.$el.attr('id', this.idPrefix + this.options.id);\n      }\n      return this;\n    },\n    afterRender: function() {\n\n    },\n    serializedModel: function() {\n      return this.options;\n    },\n    applyTemplate: function() {\n      if (this.template !== null) {\n        var data = $.extend({_t: _t}, this.options, this.serializedModel());\n        var template = this.template;\n        if(typeof(template) === 'string'){\n          template = _.template(template);\n        }\n        this.$el.html(template(data));\n      }\n    },\n    propagateEvent: function(eventName) {\n      if (eventName.indexOf(':') > 0) {\n        var eventId = eventName.split(':')[0];\n        if (this.eventPrefix !== '') {\n          if (eventId === this.eventPrefix ||\n              eventId === this.eventPrefix + '.' + this.id) { return true; }\n        }\n      }\n      return false;\n    },\n    uiEventTrigger: function(name) {\n      var args = [].slice.call(arguments, 0);\n\n      if (this.eventPrefix !== '') {\n        args[0] = this.eventPrefix + ':' + name;\n        Backbone.View.prototype.trigger.apply(this, args);\n        if (this.id) {\n          args[0] =  this.eventPrefix + '.' + this.id + ':' + name;\n          Backbone.View.prototype.trigger.apply(this, args);\n        }\n      }\n    }\n  });\n\n  return BaseView;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockupjs/ui/views/base.js?");

/***/ })

}]);