(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[8],{

/***/ "./.plone/++plone++static/components/bootstrap/js/collapse.js":
/*!********************************************************************!*\
  !*** ./.plone/++plone++static/components/bootstrap/js/collapse.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*** IMPORTS FROM imports-loader ***/\nvar jQuery = __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\");\n\n/* ========================================================================\n * Bootstrap: collapse.js v3.3.6\n * http://getbootstrap.com/javascript/#collapse\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // COLLAPSE PUBLIC CLASS DEFINITION\n  // ================================\n\n  var Collapse = function (element, options) {\n    this.$element      = $(element)\n    this.options       = $.extend({}, Collapse.DEFAULTS, options)\n    this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' +\n                           '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')\n    this.transitioning = null\n\n    if (this.options.parent) {\n      this.$parent = this.getParent()\n    } else {\n      this.addAriaAndCollapsedClass(this.$element, this.$trigger)\n    }\n\n    if (this.options.toggle) this.toggle()\n  }\n\n  Collapse.VERSION  = '3.3.6'\n\n  Collapse.TRANSITION_DURATION = 350\n\n  Collapse.DEFAULTS = {\n    toggle: true\n  }\n\n  Collapse.prototype.dimension = function () {\n    var hasWidth = this.$element.hasClass('width')\n    return hasWidth ? 'width' : 'height'\n  }\n\n  Collapse.prototype.show = function () {\n    if (this.transitioning || this.$element.hasClass('in')) return\n\n    var activesData\n    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')\n\n    if (actives && actives.length) {\n      activesData = actives.data('bs.collapse')\n      if (activesData && activesData.transitioning) return\n    }\n\n    var startEvent = $.Event('show.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    if (actives && actives.length) {\n      Plugin.call(actives, 'hide')\n      activesData || actives.data('bs.collapse', null)\n    }\n\n    var dimension = this.dimension()\n\n    this.$element\n      .removeClass('collapse')\n      .addClass('collapsing')[dimension](0)\n      .attr('aria-expanded', true)\n\n    this.$trigger\n      .removeClass('collapsed')\n      .attr('aria-expanded', true)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse in')[dimension]('')\n      this.transitioning = 0\n      this.$element\n        .trigger('shown.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    var scrollSize = $.camelCase(['scroll', dimension].join('-'))\n\n    this.$element\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])\n  }\n\n  Collapse.prototype.hide = function () {\n    if (this.transitioning || !this.$element.hasClass('in')) return\n\n    var startEvent = $.Event('hide.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    var dimension = this.dimension()\n\n    this.$element[dimension](this.$element[dimension]())[0].offsetHeight\n\n    this.$element\n      .addClass('collapsing')\n      .removeClass('collapse in')\n      .attr('aria-expanded', false)\n\n    this.$trigger\n      .addClass('collapsed')\n      .attr('aria-expanded', false)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.transitioning = 0\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse')\n        .trigger('hidden.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    this.$element\n      [dimension](0)\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)\n  }\n\n  Collapse.prototype.toggle = function () {\n    this[this.$element.hasClass('in') ? 'hide' : 'show']()\n  }\n\n  Collapse.prototype.getParent = function () {\n    return $(this.options.parent)\n      .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')\n      .each($.proxy(function (i, element) {\n        var $element = $(element)\n        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)\n      }, this))\n      .end()\n  }\n\n  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\n    var isOpen = $element.hasClass('in')\n\n    $element.attr('aria-expanded', isOpen)\n    $trigger\n      .toggleClass('collapsed', !isOpen)\n      .attr('aria-expanded', isOpen)\n  }\n\n  function getTargetFromTrigger($trigger) {\n    var href\n    var target = $trigger.attr('data-target')\n      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\n\n    return $(target)\n  }\n\n\n  // COLLAPSE PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.collapse')\n      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false\n      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.collapse\n\n  $.fn.collapse             = Plugin\n  $.fn.collapse.Constructor = Collapse\n\n\n  // COLLAPSE NO CONFLICT\n  // ====================\n\n  $.fn.collapse.noConflict = function () {\n    $.fn.collapse = old\n    return this\n  }\n\n\n  // COLLAPSE DATA-API\n  // =================\n\n  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\n    var $this   = $(this)\n\n    if (!$this.attr('data-target')) e.preventDefault()\n\n    var $target = getTargetFromTrigger($this)\n    var data    = $target.data('bs.collapse')\n    var option  = data ? 'toggle' : $this.data()\n\n    Plugin.call($target, option)\n  })\n\n}(jQuery);\n\n\n\n//# sourceURL=webpack:///./.plone/++plone++static/components/bootstrap/js/collapse.js?");

/***/ }),

/***/ "./.plone/++plone++static/components/bootstrap/js/tooltip.js":
/*!*******************************************************************!*\
  !*** ./.plone/++plone++static/components/bootstrap/js/tooltip.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*** IMPORTS FROM imports-loader ***/\nvar jQuery = __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\");\n\n/* ========================================================================\n * Bootstrap: tooltip.js v3.3.6\n * http://getbootstrap.com/javascript/#tooltip\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // TOOLTIP PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Tooltip = function (element, options) {\n    this.type       = null\n    this.options    = null\n    this.enabled    = null\n    this.timeout    = null\n    this.hoverState = null\n    this.$element   = null\n    this.inState    = null\n\n    this.init('tooltip', element, options)\n  }\n\n  Tooltip.VERSION  = '3.3.6'\n\n  Tooltip.TRANSITION_DURATION = 150\n\n  Tooltip.DEFAULTS = {\n    animation: true,\n    placement: 'top',\n    selector: false,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    container: false,\n    viewport: {\n      selector: 'body',\n      padding: 0\n    }\n  }\n\n  Tooltip.prototype.init = function (type, element, options) {\n    this.enabled   = true\n    this.type      = type\n    this.$element  = $(element)\n    this.options   = this.getOptions(options)\n    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))\n    this.inState   = { click: false, hover: false, focus: false }\n\n    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\n      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\n    }\n\n    var triggers = this.options.trigger.split(' ')\n\n    for (var i = triggers.length; i--;) {\n      var trigger = triggers[i]\n\n      if (trigger == 'click') {\n        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))\n      } else if (trigger != 'manual') {\n        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'\n        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'\n\n        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))\n        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))\n      }\n    }\n\n    this.options.selector ?\n      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\n      this.fixTitle()\n  }\n\n  Tooltip.prototype.getDefaults = function () {\n    return Tooltip.DEFAULTS\n  }\n\n  Tooltip.prototype.getOptions = function (options) {\n    options = $.extend({}, this.getDefaults(), this.$element.data(), options)\n\n    if (options.delay && typeof options.delay == 'number') {\n      options.delay = {\n        show: options.delay,\n        hide: options.delay\n      }\n    }\n\n    return options\n  }\n\n  Tooltip.prototype.getDelegateOptions = function () {\n    var options  = {}\n    var defaults = this.getDefaults()\n\n    this._options && $.each(this._options, function (key, value) {\n      if (defaults[key] != value) options[key] = value\n    })\n\n    return options\n  }\n\n  Tooltip.prototype.enter = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true\n    }\n\n    if (self.tip().hasClass('in') || self.hoverState == 'in') {\n      self.hoverState = 'in'\n      return\n    }\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'in'\n\n    if (!self.options.delay || !self.options.delay.show) return self.show()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'in') self.show()\n    }, self.options.delay.show)\n  }\n\n  Tooltip.prototype.isInStateTrue = function () {\n    for (var key in this.inState) {\n      if (this.inState[key]) return true\n    }\n\n    return false\n  }\n\n  Tooltip.prototype.leave = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false\n    }\n\n    if (self.isInStateTrue()) return\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'out'\n\n    if (!self.options.delay || !self.options.delay.hide) return self.hide()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'out') self.hide()\n    }, self.options.delay.hide)\n  }\n\n  Tooltip.prototype.show = function () {\n    var e = $.Event('show.bs.' + this.type)\n\n    if (this.hasContent() && this.enabled) {\n      this.$element.trigger(e)\n\n      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])\n      if (e.isDefaultPrevented() || !inDom) return\n      var that = this\n\n      var $tip = this.tip()\n\n      var tipId = this.getUID(this.type)\n\n      this.setContent()\n      $tip.attr('id', tipId)\n      this.$element.attr('aria-describedby', tipId)\n\n      if (this.options.animation) $tip.addClass('fade')\n\n      var placement = typeof this.options.placement == 'function' ?\n        this.options.placement.call(this, $tip[0], this.$element[0]) :\n        this.options.placement\n\n      var autoToken = /\\s?auto?\\s?/i\n      var autoPlace = autoToken.test(placement)\n      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'\n\n      $tip\n        .detach()\n        .css({ top: 0, left: 0, display: 'block' })\n        .addClass(placement)\n        .data('bs.' + this.type, this)\n\n      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)\n      this.$element.trigger('inserted.bs.' + this.type)\n\n      var pos          = this.getPosition()\n      var actualWidth  = $tip[0].offsetWidth\n      var actualHeight = $tip[0].offsetHeight\n\n      if (autoPlace) {\n        var orgPlacement = placement\n        var viewportDim = this.getPosition(this.$viewport)\n\n        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :\n                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :\n                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :\n                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :\n                    placement\n\n        $tip\n          .removeClass(orgPlacement)\n          .addClass(placement)\n      }\n\n      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\n\n      this.applyPlacement(calculatedOffset, placement)\n\n      var complete = function () {\n        var prevHoverState = that.hoverState\n        that.$element.trigger('shown.bs.' + that.type)\n        that.hoverState = null\n\n        if (prevHoverState == 'out') that.leave(that)\n      }\n\n      $.support.transition && this.$tip.hasClass('fade') ?\n        $tip\n          .one('bsTransitionEnd', complete)\n          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n        complete()\n    }\n  }\n\n  Tooltip.prototype.applyPlacement = function (offset, placement) {\n    var $tip   = this.tip()\n    var width  = $tip[0].offsetWidth\n    var height = $tip[0].offsetHeight\n\n    // manually read margins because getBoundingClientRect includes difference\n    var marginTop = parseInt($tip.css('margin-top'), 10)\n    var marginLeft = parseInt($tip.css('margin-left'), 10)\n\n    // we must check for NaN for ie 8/9\n    if (isNaN(marginTop))  marginTop  = 0\n    if (isNaN(marginLeft)) marginLeft = 0\n\n    offset.top  += marginTop\n    offset.left += marginLeft\n\n    // $.fn.offset doesn't round pixel values\n    // so we use setOffset directly with our own function B-0\n    $.offset.setOffset($tip[0], $.extend({\n      using: function (props) {\n        $tip.css({\n          top: Math.round(props.top),\n          left: Math.round(props.left)\n        })\n      }\n    }, offset), 0)\n\n    $tip.addClass('in')\n\n    // check to see if placing tip in new offset caused the tip to resize itself\n    var actualWidth  = $tip[0].offsetWidth\n    var actualHeight = $tip[0].offsetHeight\n\n    if (placement == 'top' && actualHeight != height) {\n      offset.top = offset.top + height - actualHeight\n    }\n\n    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)\n\n    if (delta.left) offset.left += delta.left\n    else offset.top += delta.top\n\n    var isVertical          = /top|bottom/.test(placement)\n    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight\n    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'\n\n    $tip.offset(offset)\n    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\n  }\n\n  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\n    this.arrow()\n      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n      .css(isVertical ? 'top' : 'left', '')\n  }\n\n  Tooltip.prototype.setContent = function () {\n    var $tip  = this.tip()\n    var title = this.getTitle()\n\n    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)\n    $tip.removeClass('fade in top bottom left right')\n  }\n\n  Tooltip.prototype.hide = function (callback) {\n    var that = this\n    var $tip = $(this.$tip)\n    var e    = $.Event('hide.bs.' + this.type)\n\n    function complete() {\n      if (that.hoverState != 'in') $tip.detach()\n      that.$element\n        .removeAttr('aria-describedby')\n        .trigger('hidden.bs.' + that.type)\n      callback && callback()\n    }\n\n    this.$element.trigger(e)\n\n    if (e.isDefaultPrevented()) return\n\n    $tip.removeClass('in')\n\n    $.support.transition && $tip.hasClass('fade') ?\n      $tip\n        .one('bsTransitionEnd', complete)\n        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n      complete()\n\n    this.hoverState = null\n\n    return this\n  }\n\n  Tooltip.prototype.fixTitle = function () {\n    var $e = this.$element\n    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\n      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\n    }\n  }\n\n  Tooltip.prototype.hasContent = function () {\n    return this.getTitle()\n  }\n\n  Tooltip.prototype.getPosition = function ($element) {\n    $element   = $element || this.$element\n\n    var el     = $element[0]\n    var isBody = el.tagName == 'BODY'\n\n    var elRect    = el.getBoundingClientRect()\n    if (elRect.width == null) {\n      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })\n    }\n    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()\n    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }\n    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null\n\n    return $.extend({}, elRect, scroll, outerDims, elOffset)\n  }\n\n  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\n    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\n        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }\n\n  }\n\n  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\n    var delta = { top: 0, left: 0 }\n    if (!this.$viewport) return delta\n\n    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0\n    var viewportDimensions = this.getPosition(this.$viewport)\n\n    if (/right|left/.test(placement)) {\n      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll\n      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight\n      if (topEdgeOffset < viewportDimensions.top) { // top overflow\n        delta.top = viewportDimensions.top - topEdgeOffset\n      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\n      }\n    } else {\n      var leftEdgeOffset  = pos.left - viewportPadding\n      var rightEdgeOffset = pos.left + viewportPadding + actualWidth\n      if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n        delta.left = viewportDimensions.left - leftEdgeOffset\n      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\n      }\n    }\n\n    return delta\n  }\n\n  Tooltip.prototype.getTitle = function () {\n    var title\n    var $e = this.$element\n    var o  = this.options\n\n    title = $e.attr('data-original-title')\n      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\n\n    return title\n  }\n\n  Tooltip.prototype.getUID = function (prefix) {\n    do prefix += ~~(Math.random() * 1000000)\n    while (document.getElementById(prefix))\n    return prefix\n  }\n\n  Tooltip.prototype.tip = function () {\n    if (!this.$tip) {\n      this.$tip = $(this.options.template)\n      if (this.$tip.length != 1) {\n        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')\n      }\n    }\n    return this.$tip\n  }\n\n  Tooltip.prototype.arrow = function () {\n    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\n  }\n\n  Tooltip.prototype.enable = function () {\n    this.enabled = true\n  }\n\n  Tooltip.prototype.disable = function () {\n    this.enabled = false\n  }\n\n  Tooltip.prototype.toggleEnabled = function () {\n    this.enabled = !this.enabled\n  }\n\n  Tooltip.prototype.toggle = function (e) {\n    var self = this\n    if (e) {\n      self = $(e.currentTarget).data('bs.' + this.type)\n      if (!self) {\n        self = new this.constructor(e.currentTarget, this.getDelegateOptions())\n        $(e.currentTarget).data('bs.' + this.type, self)\n      }\n    }\n\n    if (e) {\n      self.inState.click = !self.inState.click\n      if (self.isInStateTrue()) self.enter(self)\n      else self.leave(self)\n    } else {\n      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\n    }\n  }\n\n  Tooltip.prototype.destroy = function () {\n    var that = this\n    clearTimeout(this.timeout)\n    this.hide(function () {\n      that.$element.off('.' + that.type).removeData('bs.' + that.type)\n      if (that.$tip) {\n        that.$tip.detach()\n      }\n      that.$tip = null\n      that.$arrow = null\n      that.$viewport = null\n    })\n  }\n\n\n  // TOOLTIP PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.tooltip')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.tooltip\n\n  $.fn.tooltip             = Plugin\n  $.fn.tooltip.Constructor = Tooltip\n\n\n  // TOOLTIP NO CONFLICT\n  // ===================\n\n  $.fn.tooltip.noConflict = function () {\n    $.fn.tooltip = old\n    return this\n  }\n\n}(jQuery);\n\n\n\n//# sourceURL=webpack:///./.plone/++plone++static/components/bootstrap/js/tooltip.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/base/pattern.js":
/*!***************************************************!*\
  !*** ./.plone/++resource++mockup/base/pattern.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Mockup shim of the Patternslib Base Pattern\n */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\"),\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Base) {\n  'use strict';\n\n  var MockupBase = function MockupBaseWrapper() {\n    return Base.apply(this, arguments);\n  };\n  for (var key in Base) {\n    if (Base.hasOwnProperty(key)) {\n      MockupBase[key] = Base[key];\n    }\n  }\n  MockupBase.prototype = Base.prototype;\n  MockupBase.prototype.constructor = MockupBase;\n\n  MockupBase.extend = function() {\n    console.log(\n      \"Usage of the mockup-patterns-base pattern is deprecated and it will eventually be removed.\"+\n      \"Instead, use pat-base and explicitly set parser to 'mockup' when calling extend.\");\n    var child = Base.extend.apply(this, arguments);\n    child.prototype.parser = 'mockup';\n    return child;\n  };\n\n  return MockupBase;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/base/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/contentloader/pattern.js":
/*!************************************************************!*\
  !*** ./.plone/++resource++mockup/contentloader/pattern.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Content loader pattern.\n *\n * Options:\n *    content(string): CSS selector for content, which is going to replace the target. Can be a local element already in the DOM tree or come from an AJAX call by using the url option.\n *    target(string): CSS selector of target element, which is being replaced. If it's empty, the pattern element will be replaced.\n *    trigger(string): Event to trigger content loading. Defaults to \"click\"\n *    url(string): To load content from remote resource. Use 'el' to use with anchor tag href.\n *\n * Documentation:\n *    # With selector\n *    {{ example-1 }}\n *\n *    # With remote content\n *    {{ example-2 }}\n *\n * Example: example-1\n *    <a href=\"#\" class=\"pat-contentloader\" data-pat-contentloader=\"content:#clexample1;target:#clexample1target;\">Load content</a>\n *    <div id=\"clexample1target\">Original Content</div>\n *    <div id=\"clexample1\" style=\"display:none\">Replaced Content</div>\n *\n * Example: example-2\n *    <a href=\"#\" class=\"pat-contentloader\" data-pat-contentloader=\"url:something.html;\">Load content</a>\n *\n *\n */\n\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\"),\n  __webpack_require__(/*! pat-logger */ \"./.plone/++plone++static/components/patternslib/src/core/logger.js\"),\n  __webpack_require__(/*! pat-registry */ \"./.plone/++plone++static/components/patternslib/src/core/registry.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, Base, logger, Registry, utils, _) {\n  'use strict';\n  var log = logger.getLogger('pat-contentloader');\n\n  var ContentLoader = Base.extend({\n    name: 'contentloader',\n    trigger: '.pat-contentloader',\n    parser: 'mockup',\n    defaults: {\n      url: null,\n      content: null,\n      trigger: 'click',\n      target: null,\n      template: null,\n      dataType: 'html'\n    },\n    init: function() {\n      var that = this;\n      if(that.options.url === 'el' && that.$el[0].tagName === 'A'){\n        that.options.url = that.$el.attr('href');\n      }\n      that.$el.removeClass('loading-content');\n      that.$el.removeClass('content-load-error');\n      if(that.options.trigger === 'immediate'){\n        that._load();\n      }else{\n        that.$el.on(that.options.trigger, function(e){\n          e.preventDefault();\n          that._load();\n        });\n      }\n    },\n    _load: function(){\n      var that = this;\n      that.$el.addClass('loading-content');\n      if(that.options.url){\n        that.loadRemote();\n      }else{\n        that.loadLocal();\n      }\n    },\n    loadRemote: function(){\n      var that = this;\n      $.ajax({\n        url: that.options.url,\n        dataType: that.options.dataType,\n        success: function(data){\n          var $el;\n          if(that.options.dataType === 'html'){\n            if(data.indexOf('<html') !== -1){\n              data = utils.parseBodyTag(data);\n            }\n            $el = $('<div>' + data + '</div>');  // jQuery starts to search at the first child element.\n          }else if(that.options.dataType.indexOf('json') !== -1){\n            // must have template defined with json\n            if(data.constructor === Array && data.length === 1){\n              // normalize json if it makes sense since some json returns as array with one item\n              data = data[0];\n            }\n            try{\n              $el = $(_.template(that.options.template)(data));\n            }catch(e){\n              that.$el.removeClass('loading-content');\n              that.$el.addClass('content-load-error');\n              log.warn('error rendering template. pat-contentloader will not work');\n              return;\n            }\n          }\n          if(that.options.content !== null){\n            $el = $el.find(that.options.content);\n          }\n          that.loadLocal($el);\n        },\n        error: function(){\n          that.$el.removeClass('loading-content');\n          that.$el.addClass('content-load-error');\n        }\n      });\n    },\n    loadLocal: function($content){\n      var that = this;\n      if(!$content && that.options.content === null){\n        that.$el.removeClass('loading-content');\n        that.$el.addClass('content-load-error');\n        log.warn('No selector configured');\n        return;\n      }\n      var $target = that.$el;\n      if(that.options.target !== null){\n        $target = $(that.options.target);\n        if($target.size() === 0){\n          that.$el.removeClass('loading-content');\n          that.$el.addClass('content-load-error');\n          log.warn('No target nodes found');\n          return;\n        }\n      }\n\n      if(!$content){\n        $content = $(that.options.content).clone();\n      }\n      if ($content.length) {\n        $content.show();\n        $target.replaceWith($content);\n        Registry.scan($content);\n      } else {\n        // empty target node instead of removing it.\n        // allows for subsequent content loader calls to work sucessfully.\n        $target.empty();\n      }\n\n      that.$el.removeClass('loading-content');\n      that.emit('loading-done');\n    }\n  });\n\n  return ContentLoader;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/contentloader/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/cookietrigger/pattern.js":
/*!************************************************************!*\
  !*** ./.plone/++resource++mockup/cookietrigger/pattern.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Cookie Trigger pattern.\n *\n * Show a DOM element if browser cookies are disabled.\n *\n * Documentation:\n *\n *    {{ example-1 }}\n *\n * Example: example-1\n *    <div class=\"portalMessage error pat-cookietrigger\">\n *      Cookies are not enabled. You must enable cookies before you can log in.\n *    </div>\n */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Base) {\n  'use strict';\n\n  var CookieTrigger = Base.extend({\n    name: 'cookietrigger',\n    trigger: '.pat-cookietrigger',\n    parser: 'mockup',\n\n    isCookiesEnabled: function() {\n      /* Test whether cookies are enabled by attempting to set a cookie\n       * and then change its value set test cookie.\n       */\n      var c = \"areYourCookiesEnabled=0\";\n      document.cookie = c;\n      var dc = document.cookie;\n      // cookie not set?  fail\n      if (dc.indexOf(c) === -1) {\n        return 0;\n      }\n      // change test cookie\n      c = \"areYourCookiesEnabled=1\";\n      document.cookie = c;\n      dc = document.cookie;\n      // cookie not changed?  fail\n      if (dc.indexOf(c) === -1) {\n        return 0;\n      }\n      // delete cookie\n      document.cookie = \"areYourCookiesEnabled=; expires=Thu, 01-Jan-70 00:00:01 GMT\";\n      return 1;\n    },\n\n    showIfCookiesDisabled: function() {\n      /* Show the element on which this pattern is defined if cookies are\n       * disabled.\n       */\n      if (this.isCookiesEnabled()) {\n        this.$el.hide();\n      } else {\n        this.$el.show();\n      }\n    },\n\n    init: function () {\n      this.showIfCookiesDisabled();\n    },\n  });\n  return CookieTrigger;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/cookietrigger/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/formautofocus/pattern.js":
/*!************************************************************!*\
  !*** ./.plone/++resource++mockup/formautofocus/pattern.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Formautofocus pattern.\n *\n * Options:\n *    condition(string): TODO ('div.error')\n *    target(string): TODO (\"div.error :input:not(.formTabs):visible:first')\n *    always(string): TODO (:input:not(.formTabs):visible:first')\n *\n * Documentation:\n *    # TODO\n *\n * Example: example-1\n *\n */\n\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, Base, undefined) {\n  'use strict';\n\n  var FormAutoFocus = Base.extend({\n    name: 'formautofocus',\n    trigger: '.pat-formautofocus',\n    parser: 'mockup',\n    defaults: {\n      condition: 'div.error',\n      target: 'div.error :input:not(.formTabs):visible:first',\n      always: ':input:not(.formTabs):visible:first'\n    },\n    init: function() {\n      var self = this;\n      if ($(self.options.condition, self.$el).size() !== 0) {\n        $(self.options.target, self.$el).focus();\n      } else {\n        $(self.options.always, self.$el).focus();\n      }\n\n    }\n  });\n\n  return FormAutoFocus;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/formautofocus/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/formunloadalert/pattern.js":
/*!**************************************************************!*\
  !*** ./.plone/++resource++mockup/formunloadalert/pattern.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Formunloadalert pattern.\n *\n * Options:\n *    changingEvents(string): Events on which to check for changes (space-separated). ('change keyup paste')\n *    changingFields(string): Fields on which to check for changes (comma-separated). ('input,select,textarea,fileupload')\n *    message(string): Confirmation message to display when dirty form is being unloaded. (Discard changes? If you click OK, any changes you have made will be lost.)\n *\n * Documentation:\n *    # Example\n *\n *    {{ example-1 }}\n *\n * Example: example-1\n *    <form class=\"pat-formunloadalert\" onsubmit=\"javascript:return false;\">\n *      <input type=\"text\" value=\"\" />\n *      <select>\n *        <option value=\"1\">value 1</option>\n *        <option value=\"2\">value 2</option>\n *      </select>\n *      <input\n *        class=\"btn btn-large btn-primary\"\n *        type=\"submit\" value=\"Submit\" />\n *      <br />\n *      <a href=\"/\">Click here to go somewhere else</a>\n *    </form>\n *\n */\n\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\"),\n  __webpack_require__(/*! translate */ \"./.plone/++resource++mockupjs/i18n-wrapper.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Base, _t) {\n  'use strict';\n\n  var FormUnloadAlert = Base.extend({\n    name: 'formunloadalert',\n    trigger: '.pat-formunloadalert',\n    parser: 'mockup',\n    _changed : false,       // Stores a listing of raised changes by their key\n    _suppressed : false,     // whether or not warning should be suppressed\n    defaults: {\n      message :  _t('Discard changes? If you click OK, ' +\n                 'any changes you have made will be lost.'),\n      // events on which to check for changes\n      changingEvents: 'change keyup paste',\n      // fields on which to check for changes\n      changingFields: 'input,select,textarea,fileupload'\n    },\n    init: function () {\n      var self = this;\n      // if this is not a form just return\n      if (!self.$el.is('form')) { return; }\n\n      $(self.options.changingFields, self.$el).on(\n        self.options.changingEvents,\n        function (evt) {\n          self._changed = true;\n        }\n      );\n\n      var $modal = self.$el.parents('.plone-modal');\n      if ($modal.size() !== 0) {\n        $modal.data('patternPloneModal').on('hide', function(e) {\n          var modal = $modal.data('patternPloneModal');\n          if (modal) {\n            modal._suppressHide = self._handleUnload.call(self, e);\n          }\n        });\n      } else {\n        $(window).on('beforeunload', function(e) {\n          return self._handleUnload(e);\n        });\n      }\n\n      self.$el.on('submit', function(e) {\n        self._suppressed = true;\n      });\n\n    },\n    _handleUnload : function (e) {\n      var self = this;\n      if (self._suppressed) {\n        self._suppressed = false;\n        return undefined;\n      }\n      if (self._changed) {\n        var msg = self.options.message;\n        self._handleMsg(e,msg);\n        $(window).trigger('messageset');\n        return msg;\n      }\n    },\n    _handleMsg:  function(e,msg) {\n      (e || window.event).returnValue = msg;\n    }\n  });\n  return FormUnloadAlert;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/formunloadalert/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/livesearch/pattern.js":
/*!*********************************************************!*\
  !*** ./.plone/++resource++mockup/livesearch/pattern.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Livesearch\n *\n * Options:\n *    ajaxUrl(string): JSON search url\n *    perPage(integer): results per page, defaults to 7\n *    quietMillis: how long to wait after type stops before sending out request in milliseconds. Defaults to 350\n *    minimumInputLength: miniumum number of letters before doing search. Defaults to 3\n *    inputSelector: css select to input element search is done with. Defaults to input[type=\"text\"]\n *    itemTemplate: override template used to render item results\n *\n * Documentation:\n *   # General\n *\n *   # Default\n *\n *   {{ example-1 }}\n *\n * Example: example-1\n *    <form action=\"search\" class=\"pat-livesearch\" data-pat-livesearch=\"ajaxUrl:livesearch.json\">\n *      <input type=\"text\" />\n *    </form>\n *\n */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! translate */ \"./.plone/++resource++mockupjs/i18n-wrapper.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, Base, _, _t) {\n  'use strict';\n\n  var Livesearch = Base.extend({\n    name: 'livesearch',\n    trigger: '.pat-livesearch',\n    parser: 'mockup',\n    timeout: null,\n    active: false,\n    results: null,\n    selectedItem: -1,\n    resultsClass: 'livesearch-results',\n    defaults: {\n      ajaxUrl: null,\n      defaultSortOn: '',\n      perPage: 7,\n      quietMillis: 350,\n      minimumInputLength: 4,\n      inputSelector: 'input[type=\"text\"]',\n      itemTemplate: '<li class=\"search-result <%- state %>\">' +\n        '<h4 class=\"title\"><a href=\"<%- url %>\"><%- title %></a></h4>' +\n        '<p class=\"description\"><%- description %></p>' +\n      '</li>',\n    },\n    doSearch: function(page){\n      var self = this;\n      self.active = true;\n      self.render();\n      self.$el.addClass('searching');\n      var query = self.$el.serialize();\n      if(page === undefined){\n        page = 1;\n      }\n      var sort_on = function(){\n        var parameters = location.search,\n            sorton_position = parameters.indexOf('sort_on');\n        if(sorton_position === -1){\n          // return default sort\n          var $searchResults = $('#search-results');\n          if($searchResults.length > 0){\n            return $searchResults.attr('data-default-sort');\n          }\n          return self.options.defaultSortOn;\n        }\n        // cut string before sort_on parameter\n        var sort_on = parameters.substring(sorton_position);\n        // cut other parameters\n        sort_on = sort_on.split('&')[0];\n        // get just the value\n        sort_on = sort_on.split('=')[1];\n        return sort_on;\n      }();\n\n      $.ajax({\n        url: self.options.ajaxUrl + '?' + query +\n             '&page=' + page +\n             '&perPage=' + self.options.perPage +\n             '&sort_on=' + sort_on,\n        dataType: 'json'\n      }).done(function(data){\n        self.results = data;\n        self.page = page;\n        // maybe odd here.. but we're checking to see if the user\n        // has typed while a search was being performed. Perhap another search if so\n        if(query !== self.$el.serialize()){\n          self.doSearch();\n        }\n      }).fail(function(){\n        self.results = {\n          items: [{\n            url: '',\n            title: _t('Error'),\n            description: _t('There was an error searching…'),\n            state: 'error',\n            error: false\n          }],\n          total: 1\n        };\n        self.page = 1;\n      }).always(function(){\n        self.active = false;\n        self.selectedItem = -1;\n        self.$el.removeClass('searching');\n        self.render();\n      });\n    },\n    render: function(){\n      var self = this;\n      self.$results.empty();\n\n      /* find a status message */\n\n      if(self.active){\n        self.$results.append($('<li class=\"searching\">' + _t('searching…') + '</li>'));\n      }else if(self.results === null){\n        // no results gathered yet\n        self.$results.append($('<li class=\"no-results no-search\">' + _t('enter search phrase') + '</li>'));\n      } else if(self.results.total === 0){\n        self.$results.append($('<li class=\"no-results\">' + _t('no results found') + '</li>'));\n      } else{\n        self.$results.append($('<li class=\"results-summary\">' + _t('found') +\n                               ' ' + self.results.total + ' ' + _t('results') + '</li>'));\n      }\n\n      if(self.results !== null){\n        var template = _.template(self.options.itemTemplate);\n        _.each(self.results.items, function(item, index){\n          var $el = $(template($.extend({_t: _t}, item)));\n          $el.attr('data-url', item.url).on('click', function(){\n            if(!item.error){\n              window.location = item.url;\n            }\n          });\n          if(index === self.selectedItem){\n            $el.addClass('selected');\n          }\n          self.$results.append($el);\n        });\n        var nav = [];\n        if(self.page > 1){\n          var $prev = $('<a href=\"#\" class=\"prev\">' + _t('Previous') + '</a>');\n          $prev.click(function(e){\n            self.disableHiding = true;\n            e.preventDefault();\n            self.doSearch(self.page - 1);\n          });\n          nav.push($prev);\n        }\n        if((self.page * self.options.perPage) < self.results.total){\n          var $next = $('<a href=\"#\" class=\"next\">' + _t('Next') + '</a>');\n          $next.click(function(e){\n            self.disableHiding = true;\n            e.preventDefault();\n            self.doSearch(self.page + 1);\n          });\n          nav.push($next);\n        }\n        if(nav.length > 0){\n          var $li = $('<li class=\"load-more\"><div class=\"page\">' + self.page + '</div></li>');\n          $li.prepend(nav);\n          self.$results.append($li);\n        }\n      }\n      self.position();\n    },\n    position: function(){\n      /* we are positioning directly below the\n         input box, same width */\n      var self = this;\n\n      self.$el.addClass('livesearch-active');\n      var pos = self.$input.position();\n      self.$results.width(self.$el.outerWidth());\n      self.$results.css({\n        top: pos.top + self.$input.outerHeight(),\n        left: pos.left\n      });\n      self.$results.show();\n    },\n    hide: function(){\n      this.$results.hide();\n      this.$el.removeClass('livesearch-active');\n    },\n    init: function(){\n      var self = this;\n\n      self.$input = self.$el.find(self.options.inputSelector);\n      self.$input.off('focusout').on('focusout', function(){\n        /* we put this in a timer so click events still\n           get trigger on search results */\n        setTimeout(function(){\n          /* hack, look above, to handle dealing with clicks\n             unfocusing element */\n          if(!self.disableHiding){\n            self.hide();\n          }else{\n            self.disableHiding = false;\n            // and refocus elemtn\n            self.$input.focus();\n          }\n        }, 200);\n      }).off('focusin').on('focusin', function(){\n        if(!self.onceFocused){\n          /* Case: field already filled out but no reasons\n             present yet, do ajax search and grab some results */\n          self.onceFocused = true;\n          if(self.$input.val().length >= self.options.minimumInputLength){\n            self.doSearch();\n          }\n        } else if(!self.$results.is(':visible')){\n          self.render();\n        }\n      }).attr('autocomplete', 'off').off('keyup').on('keyup', function(e){\n        var code = e.keyCode || e.which;\n        // first off, we're capturing esc presses\n        if(code === 27){\n          self.$input.val('');\n          self.hide();\n          return;\n        }\n        // then, we're capturing up, down and enter key presses\n        if(self.results && self.results.items && self.results.items.length > 0){\n          if(code === 13){\n            /* enter key, check to see if there is a selected item */\n            if(self.selectedItem !== -1){\n              window.location = self.results.items[self.selectedItem].url;\n            }\n            return;\n          } else if(code === 38){\n            /* up key */\n            if(self.selectedItem !== -1){\n              self.selectedItem -= 1;\n              self.render();\n            }\n            return;\n          } else if(code === 40){\n            /* down key */\n            if(self.selectedItem < self.results.items.length){\n              self.selectedItem += 1;\n              self.render();\n            }\n            return;\n          }\n        }\n\n        /* then, we handle timeouts for doing ajax search */\n        if(self.timeout !== null){\n          clearTimeout(self.timeout);\n          self.timeout = null;\n        }\n        if(self.active){\n          return;\n        }\n        if(self.$input.val().length >= self.options.minimumInputLength){\n          self.timeout = setTimeout(function(){\n            self.doSearch();\n          }, self.options.quietMillis);\n        }else{\n          self.results = null;\n          self.render();\n        }\n      });\n      $('#sorting-options a').click(function(e){\n        e.preventDefault();\n        self.onceFocused = false;\n      });\n\n      /* create result dom */\n      self.$results = $('<ul class=\"' + self.resultsClass + '\"></ul>').hide().insertAfter(self.$input);\n    }\n  });\n\n  return Livesearch;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/livesearch/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/markspeciallinks/pattern.js":
/*!***************************************************************!*\
  !*** ./.plone/++resource++mockup/markspeciallinks/pattern.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Mark special links\n *\n * Options:\n *    external_links_open_new_window(boolean): Open external links in a new window. (false)\n *    mark_special_links(boolean): Marks external or special protocl links with class. (true)\n *\n * Documentation:\n *   # General\n *\n *   Scan all links in the container and mark external links with class\n *   if they point outside the site, or are special protocols.\n *   Also implements new window opening for external links.\n *   To disable this effect for links on a one-by-one-basis,\n *   give them a class of 'link-plain'\n *\n *   # Default external link example\n *\n *   {{ example-1 }}\n *\n *   # Open external link in new window\n *\n *   {{ example-2 }}\n *\n *   # Open external link in new window, without icons\n *\n *   {{ example-3 }}\n *\n *   # List of all protocol icons\n *\n *   {{ example-4 }}\n *\n * Example: example-1\n *    <div class=\"pat-markspeciallinks\">\n *      <ul>\n *        <li>Find out What's new in <a href=\"http://www.plone.org\">Plone</a>.</li>\n *        <li>Plone is written in <a class=\"link-plain\" href=\"http://www.python.org\">Python</a>.</li>\n *        <li>Plone builds on <a href=\"http://zope.org\">Zope</a>.</li>\n *        <li>Plone uses <a href=\"/\">Mockup</a>.</li>\n *      </ul>\n *    </div>\n *\n * Example: example-2\n *    <div class=\"pat-markspeciallinks\" data-pat-markspeciallinks='{\"external_links_open_new_window\": \"true\"}'>\n *      <ul>\n *        <li>Find out What's new in <a href=\"http://www.plone.org\">Plone</a>.</li>\n *        <li>Plone is written in <a class=\"link-plain\" href=\"http://www.python.org\">Python</a>.</li>\n *        <li>Plone builds on <a href=\"http://zope.org\">Zope</a>.</li>\n *        <li>Plone uses <a href=\"/\">Mockup</a>.</li>\n *      </ul>\n *    </div>\n *\n * Example: example-3\n *    <div class=\"pat-markspeciallinks\" data-pat-markspeciallinks='{\"external_links_open_new_window\": \"true\", \"mark_special_links\": \"false\"}'>\n *      <ul>\n *        <li>Find out What's new in <a href=\"http://www.plone.org\">Plone</a>.</li>\n *        <li>Plone is written in <a class=\"link-plain\" href=\"http://www.python.org\">Python</a>.</li>\n *        <li>Plone builds on <a href=\"http://zope.org\">Zope</a>.</li>\n *        <li>Plone uses <a href=\"/\">Mockup</a>.</li>\n *      </ul>\n *    </div>\n *\n * Example: example-4\n *    <div class=\"pat-markspeciallinks\">\n *        <ul>\n *          <li><a href=\"http://www.plone.org\">http</a></li>\n *          <li><a href=\"https://www.plone.org\">https</a></li>\n *          <li><a href=\"mailto:info@plone.org\">mailto</a></li>\n *          <li><a href=\"ftp://www.plone.org\">ftp</a></li>\n *          <li><a href=\"news://www.plone.org\">news</a></li>\n *          <li><a href=\"irc://www.plone.org\">irc</a></li>\n *          <li><a href=\"h323://www.plone.org\">h323</a></li>\n *          <li><a href=\"sip://www.plone.org\">sip</a></li>\n *          <li><a href=\"callto://www.plone.org\">callto</a></li>\n *          <li><a href=\"feed://www.plone.org\">feed</a></li>\n *          <li><a href=\"webcal://www.plone.org\">webcal</a></li>\n *        </ul>\n *    </div>\n *\n */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\"),\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Base, $) {\n  'use strict';\n\n  var MarkSpecialLinks = Base.extend({\n    name: 'markspeciallinks',\n    trigger: '.pat-markspeciallinks',\n    parser: 'mockup',\n    defaults: {\n      external_links_open_new_window: false,\n      mark_special_links: true\n    },\n    init: function () {\n      var self = this, $el = self.$el;\n\n      // first make external links open in a new window, afterwards do the\n      // normal plone link wrapping in only the content area\n      var elonw,\n          msl,\n          url,\n          protocols,\n          contentarea,\n          res;\n\n      if (typeof self.options.external_links_open_new_window === 'string') {\n          elonw = self.options.external_links_open_new_window.toLowerCase() === 'true';\n      } else if (typeof self.options.external_links_open_new_window === 'boolean') {\n          elonw = self.options.external_links_open_new_window;\n      }\n\n      if (typeof self.options.mark_special_links === 'string') {\n          msl = self.options.mark_special_links.toLowerCase() === 'true';\n      } else if (typeof self.options.mark_special_links === 'boolean') {\n          msl = self.options.mark_special_links;\n      }\n\n      url = window.location.protocol + '//' + window.location.host;\n      protocols = /^(mailto|ftp|news|irc|h323|sip|callto|https|feed|webcal)/;\n      contentarea = $el;\n\n      if (elonw) {\n          // all http links (without the link-plain class), not within this site\n          contentarea.find('a[href^=\"http\"]:not(.link-plain):not([href^=\"' + url + '\"])')\n                     .attr('target', '_blank')\n                     .attr('rel', 'noopener');\n      }\n\n      if (msl) {\n        // All links with an http href (without the link-plain class), not within this site,\n        // and no img children should be wrapped in a link-external span\n        contentarea.find(\n            'a[href^=\"http:\"]:not(.link-plain):not([href^=\"' + url + '\"]):not(:has(img))')\n            .before('<i class=\"glyphicon link-external\"></i>');\n        // All links without an http href (without the link-plain class), not within this site,\n        // and no img children should be wrapped in a link-[protocol] span\n        contentarea.find(\n            'a[href]:not([href^=\"http:\"]):not(.link-plain):not([href^=\"' + url + '\"]):not(:has(img)):not([href^=\"#\"])')\n            .each(function() {\n                // those without a http link may have another interesting protocol\n                // wrap these in a link-[protocol] span\n                res = protocols.exec($(this).attr('href'));\n                if (res) {\n                    var iconclass = 'glyphicon link-' + res[0];\n                    $(this).before('<i class=\"' + iconclass + '\"></i>');\n                }\n            }\n        );\n      }\n    }\n  });\n  return MarkSpecialLinks;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/markspeciallinks/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/preventdoublesubmit/pattern.js":
/*!******************************************************************!*\
  !*** ./.plone/++resource++mockup/preventdoublesubmit/pattern.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* PreventDoubleSubmit pattern.\n *\n * Options:\n *    guardClassName(string): Class applied to submit button after it is clicked once. ('submitting')\n *    optOutClassName(string): Class used to opt-out a submit button from double-submit prevention. ('allowMultiSubmit')\n *    message(string): Message to be displayed when \"opt-out\" submit button is clicked a second time. ('You already clicked the submit button. Do you really want to submit this form again?')\n *\n * Documentation:\n *    # Example\n *\n *    {{ example-1 }}\n *\n * Example: example-1\n *    <form class=\"pat-preventdoublesubmit\" onsubmit=\"javascript:return false;\">\n *      <input type=\"text\" value=\"submit this value please!\" />\n *      <input class=\"btn btn-large btn-primary\" type=\"submit\" value=\"Single submit\" />\n *      <input class=\"btn btn-large btn-primary allowMultiSubmit\" type=\"submit\" value=\"Multi submit\" />\n *    </form>\n *\n */\n\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\"),\n  __webpack_require__(/*! translate */ \"./.plone/++resource++mockupjs/i18n-wrapper.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, Base, _t) {\n  'use strict';\n\n  var PreventDoubleSubmit = Base.extend({\n    name: 'preventdoublesubmit',\n    trigger: '.pat-preventdoublesubmit',\n    parser: 'mockup',\n    defaults: {\n      message : _t('You already clicked the submit button. ' +\n                'Do you really want to submit this form again?'),\n      guardClassName: 'submitting',\n      optOutClassName: 'allowMultiSubmit'\n    },\n    init: function() {\n      var self = this;\n\n      // if this is not a form just return\n      if (!self.$el.is('form')) {\n        return;\n      }\n\n      $(':submit', self.$el).click(function(e) {\n\n        // mark the button as clicked\n        $(':submit').removeAttr('clicked');\n        $(this).attr('clicked', 'clicked');\n\n        // if submitting and no opt-out guardClassName is found\n        // pop up confirmation dialog\n        if ($(this).hasClass(self.options.guardClassName) &&\n              !$(this).hasClass(self.options.optOutClassName)) {\n          return self._confirm.call(self);\n        }\n\n        $(this).addClass(self.options.guardClassName);\n      });\n\n    },\n\n    _confirm: function(e) {\n      return window.confirm(this.options.message);\n    }\n\n  });\n\n  return PreventDoubleSubmit;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/preventdoublesubmit/pattern.js?");

/***/ })

}]);