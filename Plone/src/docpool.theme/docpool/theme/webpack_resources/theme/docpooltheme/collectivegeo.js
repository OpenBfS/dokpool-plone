(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["collectivegeo"],{

/***/ "./.plone/++resource++collective.geo.mapwidget/collectivegeo.js":
/*!**********************************************************************!*\
  !*** ./.plone/++resource++collective.geo.mapwidget/collectivegeo.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*global window, jQuery, document, OpenLayers*/\n/*\n\n  Documentation is accessibile to this address\n  - http://<plone_url>/++resource++collective.geo.mapwidget/docs.html\n\n*/\n\n(function ($) {\n    \"use strict\";\n    // = Collective Geo =\n    //\n    // This is the application that provides Openlayers map\n    // infrastructure to collective.geo\n    //\n    // It lives in {{{window.collectivegeo}}} where it can be fetched\n    // to apply customizations.\n    if ((typeof window.collectivegeo) === 'undefined') {\n        window.collectivegeo = {};\n    }\n    var App = window.collectivegeo, methods;\n\n\n    // == MapWidget ==\n    //\n    // This class contains all method and utilities\n    // to manage collective.geo maps.\n    //\n    // Each map can get extra options from data attributes\n    // of map trigger if they are not already set when\n    // collectivegeo plugin is instantiated.\n    //\n    // Supported data:\n    //   * cgeolatitude\n    //   * cgeolongitude\n    //   * cgeozoom\n    //   * cgeolang\n    //\n    App.MapWidget = function (trigger, settings) {\n        var self = this,\n            extra_data = $(trigger).data();\n\n        self.mapid = $(trigger).attr('id');\n        self.map = null;\n        self.edit_layer = null;\n        self.trigger = trigger;\n        self.settings = settings;\n\n        if (!settings.center &&\n                extra_data.cgeolongitude !== undefined &&\n                extra_data.cgeolatitude !== undefined) {\n            settings.center = new OpenLayers.LonLat(\n                extra_data.cgeolongitude,\n                extra_data.cgeolatitude\n            );\n        }\n\n        if (!settings.zoom &&\n                extra_data.cgeozoom !== undefined) {\n            settings.zoom = extra_data.cgeozoom;\n        }\n\n        if (!settings.lang &&\n                extra_data.cgeolang !== undefined) {\n            settings.lang = extra_data.cgeolang;\n        }\n\n        // initialize map\n        self.initMap();\n    };\n\n    // === MapWidget prototype ===\n    //\n    // extends MapWidget class with some methods\n    App.MapWidget.prototype = {\n\n        // === MapWidget.initMap ===\n        //\n        // Init a map with default options and set default center and zoom\n        initMap: function () {\n            var self = this,\n                legend_id;\n\n            self.map = new OpenLayers.Map(\n                self.mapid,\n                self.getDefaultOptions()\n            );\n\n            // setup language\n            if (self.settings.lang) {\n                OpenLayers.Lang.setCode(self.settings.lang);\n            }\n\n            // Fire mapload event to allow to\n            // execute actions before maps are completely loaded\n            $(window).trigger('mapload', self);\n\n            // setup a default layers\n            if (self.map.layers.length === 0) {\n                self.addLayers(self.getDefaultLayers());\n            }\n\n            if (self.settings.center && self.settings.zoom) {\n                self.setCenter(self.settings.center, self.settings.zoom);\n            } else {\n                self.map.zoomToExtent();\n            }\n\n            // fire maploadend event where map is completely loaded\n            $(window).trigger('maploadend', self);\n\n        },\n\n        // === MapWidget.setCenter(center, zoom) ===\n        //\n        // This method set the center of the map according to\n        // its display projection.\n        //\n        // params:\n        // * center: OpenLayers.LonLat object\n        // * zoom: integer\n        setCenter: function (center, zoom) {\n            var self = this,\n                displayProjection = self.map.displayProjection;\n\n            if (displayProjection) {\n                center.transform(\n                    displayProjection,\n                    self.map.getProjectionObject()\n                );\n            }\n\n            self.map.setCenter(center, zoom);\n\n        },\n\n        // === MapWidget.addLayers(layers) ===\n        //\n        // Add layers to a specific map. Each layer must\n        // be defined by a function:\n        //\n        // {{{\n        //  var layers = [\n        //     function () {\n        //       return new OpenLayers.Layer.TMS(\n        //         ...\n        //       )\n        //     }\n        //  ...\n        // ]\n        // }}}\n        //\n        // params:\n        // * layers: array of functions\n        // * mapid: string\n        addLayers: function (layers, mapid) {\n            var self = this,\n                i;\n\n            if (mapid && self.mapid !== mapid) {\n                return null;\n            }\n\n            for (i = 0; i < layers.length; i += 1) {\n                self.map.addLayer(layers[i]());\n            }\n\n        },\n\n        // === MapWidget.getDefaultLayers ===\n        // return a {{{list}}} of Openlayers layers\n        getDefaultLayers: function () {\n            var self = this,\n                layers = [];\n            return [\n                function () {\n                    return new OpenLayers.Layer.TMS(\n                        'Base layer',\n                        'http://tile.openstreetmap.org/',\n                        {\n                            type: 'png',\n                            getURL: self.osmGetTileURL,\n                            transitionEffect: 'resize',\n                            displayOutsideMaxExtent: true,\n                            numZoomLevels: 19,\n                            attribution: '<a href=\"http://www.openstreetmap.org/\">OpenStreetMap</a>'\n                        }\n                    );\n                }\n            ];\n\n        },\n\n        // === MapWidget.getDefaultOptions ===\n        //\n        // return default map options extending {{{settings.map_defaults}}}\n        getDefaultOptions: function () {\n            return $.extend({\n                theme: null, // disable default theme\n                projection: new OpenLayers.Projection(\"EPSG:900913\"),\n                displayProjection: new OpenLayers.Projection(\"EPSG:4326\"),\n                units: \"m\",\n                numZoomLevels: 19,\n                ImgPath: '++plone++openlayers.static/openlayers/img',\n                maxResolution: 156543.0339,\n                maxExtent: new OpenLayers.Bounds(-20037508.34, -20037508.34,\n                                                  20037508.34, 20037508.34),\n                controls: [\n                    new OpenLayers.Control.ArgParser(),\n                    new OpenLayers.Control.Attribution(),\n                    new OpenLayers.Control.LayerSwitcher({\n                        roundedCorner: false\n                    }),\n                    new OpenLayers.Control.Navigation({\n                        zoomWheelEnabled: false,\n                        dragPanOptions: {\n                            enableKinetic: true\n                        }\n                    }),\n                    new OpenLayers.Control.Zoom()\n                ]\n            }, this.settings.map_defaults);\n        },\n\n        // === MapWidget.osmGetTileURL ===\n        //\n        // method used by {{{OpenLayers.Layer.TMS}}} layer\n        // in {{{getURL}}} option\n        osmGetTileURL: function (bounds) {\n            var res = this.map.getResolution(),\n                x = Math.round((bounds.left - this.maxExtent.left) /\n                               (res * this.tileSize.w)),\n                y = Math.round((this.maxExtent.top - bounds.top) /\n                               (res * this.tileSize.h)),\n                z = this.map.getZoom() + this.zoomOffset,\n                limit = Math.pow(2, z);\n\n            if (y < 0 || y >= limit) {\n                return OpenLayers.Util.getImagesLocation() + \"blank.gif\";\n            } else {\n                x = ((x % limit) + limit) % limit;\n                return this.url + z + \"/\" + x + \"/\" + y + \".\" + this.type;\n            }\n        },\n\n        // === MapWidget.addGeocoder ===\n        //\n        // Add geocoder feature to the map.\n        // It requires a specific html structure to work properly\n        //\n        // see:\n        addGeocoder: function () {\n            var self = this,\n                geocoder = $('#' + self.mapid + \"-geocoder\"),\n                input = geocoder.find('input'),\n                search = geocoder.find('button');\n\n            search.click(function (e) {\n                self.retrieveLocation(geocoder, input.val());\n                e.preventDefault();\n            });\n\n            // perform search when return key is pressed on geocoder input\n            input.keypress(function (e) {\n                if (e.keyCode === 13) {\n                    e.preventDefault();\n                    search.click();\n                    return null;\n                }\n            });\n        },\n\n        // === MapWidget.retrieveLocation ===\n        // Map geocoder takes geocoderurl from map trigger data\n        // and retrieve locations in json format and populate\n        // geocoder {{{results}}} div.\n        //\n        // params:\n        // * geocoder: jQuery object\n        // * address: string\n        retrieveLocation: function (geocoder, address) {\n            var self = this,\n                geocoder_url = $(self.trigger).data('geocoderurl'),\n                results = geocoder.find('.results'),\n                results_ul = results.find('ul'),\n                error = geocoder.find('.fieldErrorBox'),\n                input = geocoder.find('input'),\n                offset = input.offset(),\n                set_coordinates = function (e) {\n                    var latlon = e.data.latlon;\n                    // geocoder returns [latitude, longitude]\n                    self.setCoordinates(latlon[1], latlon[0]);\n                    e.data.results.hide();\n                    e.preventDefault();\n                },\n                link,\n                li,\n                i;\n\n            results_ul.empty();\n            // results.offset({\n            //     top: offset.top,\n            //     left: offset.left\n            // });\n\n            $.getJSON(\n                geocoder_url,\n                {'address': address},\n                function (data) {\n                    if (data === null) {\n                        error.show();\n                        results.hide();\n                        geocoder.addClass('error');\n                    } else {\n                        geocoder.removeClass('error');\n                        error.hide();\n                        for (i = 0; i < data.length; i += 1) {\n                            link = $('<a>').append(data[i][0]);\n                            link.bind(\n                                'click',\n                                {\n                                    latlon: data[i][1],\n                                    results: results\n                                },\n                                set_coordinates\n                            );\n                            li = $('<li>');\n                            li.append(link);\n                            results_ul.append(li);\n                        }\n                        results.show();\n                    }\n                }\n            );\n        },\n\n        // === MapWidget.setCoordinates ===\n        //\n        // This method set coordinates to {{{MapWidget.edit_layer}}}\n        // and set value to {{{MapWidget.wkt_input}}} in WKT format.\n        //\n        // params:\n        // * longitude: float\n        // * latitude: float\n        setCoordinates: function (longitude, latitude) {\n            var self = this,\n                point = new OpenLayers.Geometry.Point(longitude, latitude);\n\n            point.transform(\n                self.map.displayProjection,\n                self.map.getProjectionObject()\n            );\n\n            self.setCenter(\n                new OpenLayers.LonLat(longitude, latitude),\n                10\n            );\n\n            // set input values\n            if (self.wkt_input) {\n                self.wkt_input.val(point.toString());\n            }\n\n            if (self.lonid && self.latid && self.zoomid) {\n                self.zoomid.val(10);\n                self.lonid.val(longitude);\n                self.latid.val(latitude);\n            }\n\n            // Add point to map\n            if (self.edit_layer) {\n                self.edit_layer.addFeatures(\n                    [new OpenLayers.Feature.Vector(point)]\n                );\n            }\n\n        }\n    };\n\n    // == WKTEditingToolbar ==\n    //\n    // This Openlayers control creates a toolbar to draw features\n    // on a map.\n    // It can draw points, lines, and polygons\n    // and store it in WKT format\n    OpenLayers.Control.WKTEditingToolbar = OpenLayers.Class(\n        OpenLayers.Control.Panel,\n        {\n\n            initialize: function (layer, options) {\n                var controls = [\n                        new OpenLayers.Control.Navigation(),\n                        new OpenLayers.Control.DrawFeature(\n                            layer,\n                            OpenLayers.Handler.Point,\n                            {\n                                'displayClass': 'olControlDrawFeaturePoint'\n                            }\n                        ),\n                        new OpenLayers.Control.DrawFeature(\n                            layer,\n                            OpenLayers.Handler.Path,\n                            {\n                                'displayClass': 'olControlDrawFeaturePath'\n                            }\n                        ),\n                        new OpenLayers.Control.DrawFeature(\n                            layer,\n                            OpenLayers.Handler.Polygon,\n                            {\n                                'displayClass': 'olControlDrawFeaturePolygon'\n                            }\n                        ),\n                        new OpenLayers.Control.ModifyFeature(layer, {\n                            mode: OpenLayers.Control.ModifyFeature.RESHAPE || OpenLayers.Control.ModifyFeature.DRAG\n                        })\n                    ],\n                    geomwkt,\n                    in_options,\n                    format,\n                    feat;\n\n                OpenLayers.Control.Panel.prototype.initialize.apply(\n                    this,\n                    [options]\n                );\n\n                this.addControls(controls);\n                this.defaultControl = this.controls[5];\n\n                // init edit layer features\n                if (this.wkt_input.length > 0) {\n                    geomwkt = this.wkt_input.val();\n                    in_options = {\n                        internalProjection: layer.map.getProjectionObject(),\n                        externalProjection: layer.map.displayProjection\n                    };\n                    format = new OpenLayers.Format.WKT(in_options);\n                    feat = format.read(geomwkt);\n\n                    if (feat) {\n                        layer.addFeatures([feat]);\n                        layer.map.zoomToExtent(layer.getDataExtent());\n                    }\n                }\n\n                layer.events.register(\n                    \"featureadded\",\n                    this,\n                    this.updateWKTWidget\n                );\n                layer.events.register(\n                    \"featuremodified\",\n                    this,\n                    this.updateWKTWidget\n                );\n\n                // ensure only one feature is on the map\n                layer.events.register(\n                    \"beforefeaturesadded\",\n                    this,\n                    function (evt) {\n                        evt.object.destroyFeatures();\n                    }\n                );\n            },\n\n            updateWKTWidget: function (evt) {\n                var out_options = {\n                        internalProjection: evt.object.map.getProjectionObject(),\n                        externalProjection: evt.object.map.displayProjection\n                    },\n                    format = new OpenLayers.Format.WKT(out_options);\n                if (this.wkt_input.length > 0) {\n                    this.wkt_input.val(format.write(evt.feature));\n                }\n                format.destroy();\n            },\n\n            CLASS_NAME: 'OpenLayers.Control.EditingToolbar'\n\n        }\n    );\n\n    // == MarkerEditingToolbar ==\n    //\n    // This Openlayers control creates a toolbar to draw points on a map.\n    OpenLayers.Control.MarkerEditingToolbar = OpenLayers.Class(\n        OpenLayers.Control.Panel,\n        {\n\n            initialize: function (layer, options) {\n                OpenLayers.Control.Panel.prototype.initialize.apply(\n                    this,\n                    [options]\n                );\n\n                var controls = [\n                        new OpenLayers.Control.Navigation(),\n                        new OpenLayers.Control.DrawFeature(\n                            layer,\n                            OpenLayers.Handler.Point,\n                            {\n                                'displayClass': 'olControlDrawFeaturePoint'\n                            }\n                        ),\n                        new OpenLayers.Control.ModifyFeature(layer)\n                    ],\n                    point;\n\n                this.addControls(controls);\n                this.defaultControl = this.controls[0];\n\n                // setup form events\n                if (this.lonid.length > 0 && this.latid.length > 0) {\n                    point = new OpenLayers.Geometry.Point(\n                        this.lonid.val(),\n                        this.latid.val()\n                    );\n\n                    if (layer.map.displayProjection) {\n                        point.transform(\n                            layer.map.displayProjection,\n                            layer.map.getProjectionObject()\n                        );\n                    }\n\n                    layer.addFeatures(\n                        [new OpenLayers.Feature.Vector(point)]\n                    );\n\n                    layer.events.register(\n                        \"featureadded\",\n                        this,\n                        this.updateForm\n                    );\n                    layer.events.register(\n                        \"featuremodified\",\n                        this,\n                        this.updateForm\n                    );\n                }\n\n                if (this.zoomid.length > 0) {\n                    layer.map.events.register(\n                        \"zoomend\",\n                        this,\n                        this.updateZoom\n                    );\n                }\n\n                // ensure only one feature is on the map\n                layer.events.register(\n                    \"beforefeaturesadded\",\n                    this,\n                    function (evt) {\n                        evt.object.destroyFeatures();\n                    }\n                );\n            },\n\n            updateZoom: function (evt) {\n                this.zoomid.val(evt.object.getZoom());\n            },\n\n            updateForm: function (evt) {\n                var lonlat = new OpenLayers.LonLat(\n                    evt.feature.geometry.x,\n                    evt.feature.geometry.y\n                );\n                if (evt.object.map.displayProjection) {\n                    lonlat.transform(\n                        evt.object.map.getProjectionObject(),\n                        evt.object.map.displayProjection\n                    );\n                }\n                this.lonid.val(lonlat.lon);\n                this.latid.val(lonlat.lat);\n            },\n\n            CLASS_NAME: 'OpenLayers.Control.EditingToolbar'\n        }\n    );\n\n    // == jQuery plugin's methods ==\n    //\n    // this object contains all jQuery's plugin methods.\n    methods = {\n        // === init ===\n        // initialize the map\n        init : function (options) {\n\n            return this.each(function () {\n                var settings = $.extend(true, {\n                    imgpath: '/',\n                    center: null,\n                    zoom: null\n                }, options),\n                    $this = $(this),\n                    data = $this.data('collectivegeo'),\n                    mapwidget;\n\n                // If the plugin hasn't been initialized yet\n                if (!data) {\n                    mapwidget = new App.MapWidget(this, settings);\n                    $(this).data('collectivegeo', {\n                        target: $this,\n                        mapwidget: mapwidget\n                    });\n                }\n            });\n\n        },\n\n        // === destroy ===\n        //\n        // this method remove all references to collectivegeo plugin\n        destroy : function () {\n            return this.each(function () {\n                var $this = $(this),\n                    data = $this.data('collectivegeo');\n                if (data) {\n                    data.collectivegeo.remove();\n                    $this.removeData('collectivegeo');\n                }\n            });\n        },\n\n        // === add_layers ===\n        //\n        // add layers to a map passing a list of layers incapsulated\n        // in a function:\n        //\n        // Usage:\n        // {{{\n        // $('#map').collectivegeo();\n        //\n        // $('#map').collectivegeo(\n        //     'add_layer',\n        //     function () {\n        //         return new OpenLayers.Layer.Google(\n        //             'Terrain (Google)',\n        //             {\n        //                 type: google.maps.MapTypeId.TERRAIN,\n        //                 numZoomLevels: 20,\n        //                 sphericalMercator: true,\n        //                 transitionEffect: 'resize'\n        //             }\n        //         );\n        //     }\n        // );\n        // }}}\n        add_layers: function (layers) {\n            return this.each(function () {\n                var $this = $(this),\n                    data = $this.data('collectivegeo');\n                if (data) {\n                    data.mapwidget.addLayers(layers);\n                }\n            });\n        },\n\n        // === refresh ===\n        //\n        // this method refresh the map using Openlayers\n        // {{{updateSize}}} method\n        refresh: function (layers) {\n            return this.each(function () {\n                var $this = $(this),\n                    data = $this.data('collectivegeo');\n                if (data) {\n                    data.mapwidget.map.updateSize();\n                }\n            });\n        },\n\n        // === add_edit_layer ===\n        //\n        // This method add an edit layer to the map\n        // that can store values to a textarea element in WKT format.\n        //\n        // Usage:\n        // {{{\n        // $(window).bind(\"load\", function () {\n        //   var maps = $('div.widget-cgmap').collectivegeo({\n        //      center: new OpenLayers.LonLat('45.00', '7.3'),\n        //      zoom: 3\n        // });\n        //\n        // $(maps[0]).collectivegeo('add_edit_layer','textarea-id');\n        //\n        // }}}\n        add_edit_layer: function (wkt_input_id) {\n            return this.each(function () {\n                var $this = $(this),\n                    data = $this.data('collectivegeo'),\n                    map,\n                    edit_layer,\n                    elctl;\n\n                if (data) {\n                    if (!wkt_input_id) {\n                        data.mapwidget.wkt_input = $(data.mapwidget.trigger).parent().find('textarea');\n                    } else {\n                        data.mapwidget.wkt_input = $('#' + wkt_input_id);\n                    }\n\n\n                    map = data.mapwidget.map;\n                    edit_layer = new OpenLayers.Layer.Vector('Edit');\n                    map.addLayer(edit_layer);\n                    data.mapwidget.edit_layer = edit_layer;\n\n\n                    elctl = new OpenLayers.Control.WKTEditingToolbar(\n                        edit_layer,\n                        {wkt_input: data.mapwidget.wkt_input}\n                    );\n\n                    map.addControl(elctl);\n                    elctl.activate();\n                }\n            });\n        },\n\n        // === add_markeredit_layer ===\n        //\n        // This method add an edit layer to the map specific\n        // to register a point and a zoom level in specific text inputs\n        //\n        // Usage:\n        // {{{\n        // $(window).bind(\"load\", function () {\n        //   var maps = $('div.widget-cgmap').collectivegeo({\n        //      center: new OpenLayers.LonLat('45.00', '7.3'),\n        //      zoom: 3\n        // });\n        //\n        // $(maps[0]).collectivegeo(\n        //    'add_edit_layer',\n        //    'longitude_input_id,\n        //    'latitude_input_id,\n        //    'zoom_input_id'\n        // );\n        //\n        // }}}\n        add_markeredit_layer: function (lonid, latid, zoomid) {\n            return this.each(function () {\n                var $this = $(this),\n                    data = $this.data('collectivegeo'),\n                    map,\n                    mapid,\n                    edit_layer,\n                    elctl;\n\n                if (data) {\n                    if (!(lonid && latid && zoomid)) {\n                        mapid = data.mapwidget.mapid;\n                        lonid = mapid + '-lon';\n                        latid = mapid + '-lat';\n                        zoomid = mapid + '-zoom';\n                    }\n\n                    data.mapwidget.lonid = $('#' + lonid);\n                    data.mapwidget.latid = $('#' + latid);\n                    data.mapwidget.zoomid = $('#' + zoomid);\n\n                    map = data.mapwidget.map;\n                    edit_layer =  new OpenLayers.Layer.Vector(\n                        'Marker',\n                        {renderOptions: {yOrdering: true}}\n                    );\n                    map.addLayer(edit_layer);\n                    data.mapwidget.edit_layer = edit_layer;\n\n                    elctl = new OpenLayers.Control.MarkerEditingToolbar(\n                        edit_layer,\n                        {\n                            lonid: data.mapwidget.lonid,\n                            latid: data.mapwidget.latid,\n                            zoomid: data.mapwidget.zoomid\n                        }\n                    );\n\n                    map.addControl(elctl);\n                    elctl.activate();\n\n                    data.mapwidget.setCenter(\n                        new OpenLayers.LonLat(\n                            $('#' + lonid).val(),\n                            $('#' + latid).val()\n                        ),\n                        $('#' + zoomid).val()\n                    );\n                }\n            });\n\n        },\n\n        // === add_geocoder ===\n        //\n        // Add geocoder feature to a map\n        add_geocoder: function () {\n            return this.each(function () {\n                var $this = $(this),\n                    data = $this.data('collectivegeo'),\n                    widget,\n                    geocoder;\n\n                if (data) {\n                    // data-geocoderurl\n                    data.mapwidget.addGeocoder();\n                }\n            });\n\n        }\n    };\n\n\n    // == collectivegeo jQuery plugin ==\n    //\n    // This jQuery plugin allows to create a collective.geo map\n    // for each element\n    //\n    // Usage:\n    // {{{\n    // $(window).bind(\"load\", function () {\n    //   $('div.widget-cgmap').collectivegeo({\n    //      center: new OpenLayers.LonLat('45.00', '7.3'),\n    //      zoom: 3\n    // });\n    // }}}\n    $.fn.extend({\n        collectivegeo: function (method) {\n\n            // Method calling logic\n            if (methods[method]) {\n                return methods[method].apply(\n                    this,\n                    Array.prototype.slice.call(arguments, 1)\n                );\n            } else if (typeof method === 'object' || !method) {\n                return methods.init.apply(this, arguments);\n            } else {\n                $.error(\n                    'Method ' +  method + ' does not exist on jQuery.collectivegeo'\n                );\n            }\n\n        }\n    });\n\n}(jQuery));\n\n\n//# sourceURL=webpack:///./.plone/++resource++collective.geo.mapwidget/collectivegeo.js?");

/***/ })

}]);