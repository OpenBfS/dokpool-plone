(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["docpool-menu"],{

/***/ "./.plone/++plone++docpool.menu/init-menu.js":
/*!***************************************************!*\
  !*** ./.plone/++plone++docpool.menu/init-menu.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n         __webpack_require__(/*! docpool-menu-plugin */ \"./.plone/++plone++docpool.menu/responsive-menu.js\")\n         ], __WEBPACK_AMD_DEFINE_RESULT__ = (function($) {\n\t'use strict';\n\n\tjQuery(function($) {\n\t\tvar menu = $('.rm-nav').rMenu({\n\t\t\tminWidth: '768px',\n\t\t\ttoggleBtnBool: false,\n\t\t});\n\t});\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\njQuery(function($) {\n\t  Promise.resolve(/*! AMD require */).then(function() {[__webpack_require__(/*! docpool-menu */ \"./.plone/++plone++docpool.menu/init-menu.js\")];}).catch(__webpack_require__.oe);\n});\n\n//# sourceURL=webpack:///./.plone/++plone++docpool.menu/init-menu.js?");

/***/ }),

/***/ "./.plone/++plone++docpool.menu/responsive-menu.js":
/*!*********************************************************!*\
  !*** ./.plone/++plone++docpool.menu/responsive-menu.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n/**\n * Responsive Menu\n * Version: 0.2.1\n * URL: private\n * Description: A drop-down responsive Menu for responsive layouts\n * Requires: jQuery\n * Optional: Modernizr\n * Author: jbowyers\n * Copyright: 2014-2015 jbowyers\n * License: This file is part of Responsive Menu.\n * Responsive Menu is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Responsive Menu is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see http://www.gnu.org/licenses/\n */\n\n;(function( $, window, document, Math, undefined ) {\n\n    'use strict';\n    var pluginName = 'rMenu';\n\n    /**\n     * The plugin\n     * @param {object} el - The menu container typically a nav element\n     * @param {object} options - plugin options object litteral\n     * @returns {Plugin}\n     * @constructor\n     */\n    var Plugin = function( el, options ) {\n\n        // Clone this object\n        var o = this;\n\n        /**\n         * Initialize option defaults and set options =============================\n         * @type {{minWidth: string, toggleSel: string, menuSel: string, menuItemsSel: string, transitionSpeed: number, animateBool: string, accelerateBool: string}}\n         */\n        o.optionsInit = {\n\n            /**\n             * Minimum width for expanded layout in pixels - String Should match media query in css file\n             * Must be in pixels and include px units if not using Modernizr.\n             * @default '769px'\n             */\n            minWidth: '769px',\n\n            /**\n             * The opening and closing speed of the menus in milliseconds\n             * @default 400\n             */\n            transitionSpeed: 400,\n\n            /**\n             * The jQuery easing function - used with jQuery transitions\n             * @default 'swing'\n             * @options 'swing', 'linear'\n             */\n            jqueryEasing: 'swing',\n\n            /**\n             * The CSS3 transitions easing function - used with CSS3 transitions\n             * @default 'ease'\n             */\n            css3Easing: 'ease',\n\n            /**\n             * Use button as Toggle Link - instead of text\n             * @default true\n             */\n            toggleBtnBool: true,\n\n            /**\n             * The Toggle Link selector\n             * @default '.rm-toggle'\n             */\n            toggleSel: '.rm-toggle',\n\n            /**\n             * The menu/sub-menu selector\n             * @default 'ul'\n             */\n            menuSel: 'ul',\n\n            /**\n             * The menu items selector\n             * @default 'li'\n             */\n            menuItemsSel: 'li',\n\n            /**\n             * Use CSS3 animation/transitions Boolean\n             * @default true\n             * Do not use animation/transitions: false\n             */\n            animateBool: true,\n\n            /**\n             * Force GPU Acceleration Boolean\n             * @default false\n             * Do not force: false\n             */\n            accelerateBool: false,\n\n            /**\n             * the setup complete callback function\n             * @default 'false'\n             */\n            setupCallback: false,\n\n            /**\n             * the tabindex start value - integer\n             * @default 1\n             */\n            tabindexStart: 1,\n\n            /**\n             * Use development mode - outputs information to console\n             * @default false\n             */\n            developmentMode: false\n        };\n        o.options = $.extend( {}, o.optionsInit, options );\n\n        // Define public objects and vars =========================================\n\n        // Toggle Link object\n        o.tButton = $( o.options.toggleSel );\n\n        // The class applied to the toggle Link element to make it a button\n        o.tButtonClass = 'rm-button';\n\n        // The class applied to the toggle Link element when it is visible\n        o.tButtonShowClass = 'rm-show';\n\n        // The class applied to the toggle Link element when it is visible\n        o.tButtonActiveClass = 'rm-active';\n\n        // Nav element object - contains the menus\n        o.el = $( el );\n\n        // The class the plugin adds to the nav element\n        o.navElementClass = 'rm-nav';\n\n        // Container object - contains everything - the Nav element and Toggle Link\n        o.container = o.el.parent();\n\n        // The class the plugin adds to the container of the nav element\n        o.containerClass = 'rm-container';\n\n        // The class applied to container element to trigger expanded layout\n        o.expandedClass = 'rm-layout-expanded';\n\n        // The class applied to container element to trigger contracted layout\n        o.contractedClass = 'rm-layout-contracted';\n\n        // The class that is removed from the toggle and nav element when JS is supported\n        o.noJSClass = 'rm-nojs';\n\n        // All menu elements\n        o.menus = o.el.find( o.options.menuSel );\n\n        // The class applied to all menu elements\n        o.menuClass = 'rm-menu';\n\n        // Top level menu object - contains the menus\n        o.topMenu = o.el.children( o.options.menuSel );\n\n        // The class the plugin adds to the top menu element\n        o.topMenuClass = 'rm-top-menu';\n\n        // The class applied to menu/sub-menu element when menu is expanded\n        o.menuExpandedClass = 'rm-menu-expanded';\n\n        // The class applied to menu/sub-menu element when menu is hidden\n        o.menuHiddenClass = 'accessibly-hidden';\n\n        // The class the plugin adds to the menu elements when calculating height\n        o.menuCalcClass = 'rm-calculate';\n\n        // The class applied to all menu items\n        o.menuItemClass = 'rm-menu-item';\n\n        // The focused parent element\n        o.itemFocused = false;\n\n        // The class applied to menu items that contain a sub-menu\n        o.parentClass = 'rm-parent';\n\n        // The class applied to a menu item when its menu is expanded\n        o.itemHoverClass = 'rm-hover';\n\n        // The class applied to the first menu item\n        o.itemFirst = 'rm-first';\n\n        // The class applied to the last menu item\n        o.itemLast = 'rm-last';\n\n        // The class applied to the second to last menu item\n        o.item2ndLast = 'rm-2nd-last';\n\n        // The CSS3 animate class variable\n        o.animateClass = 'rm-css-animate';\n\n        // The CSS3 animate Boolean\n        o.animateBool = o.options.animateBool;\n\n        // The GPU accelerate class variable\n        o.accelerateClass = 'rm-accelerate';\n\n        // The GPU accelerate Boolean\n        o.accelerateBool = o.options.accelerateBool;\n\n        // The touchmove Boolean - did a touchmove event just occur\n        o.touchMoveBool = false;\n\n        // Resize and Pause hover event timer function\n        o.timer = false;\n\n        // The window width - used to verify a window width change\n        o.windowWidth = $( window ).width();\n\n\n        /**\n         * Initiate plugin =========================================\n         * @returns {Plugin}\n         */\n        o.init = function() { // Should only be called once\n\n            // Set up the plugin\n            o.setup();\n\n            // Window event handlers\n            $( window ).on({\n\n                // Reset on screen resize\n                'resize': function() {\n\n                    // Test if width has resized - as opposed to height\n                    if ($( window ).width() !== o.windowWidth) {\n\n                        // Update the window width\n                        o.windowWidth = $( window ).width();\n\n                        // Adjust layout\n                        clearTimeout( o.timer );\n                        o.timer = setTimeout( o.adjust, 500 );\n\n                    }\n                }\n            });\n\n            // Run setupCallback function\n            if ( typeof( o.options.setupCallback ) === \"function\" ) {\n                o.options.setupCallback();\n            }\n\n            return this;\n        };\n\n        /**\n         * Setup plugin ============================================================\n         * @returns {Plugin}\n         */\n        o.setup = function() { // Can be called again to reset plugin\n\n            // Add the container class to the nav element's parent element\n            o.container.addClass( o.containerClass );\n\n            // add rm-button class if using button\n            if ( o.options.toggleBtnBool ) {\n                o.tButton.addClass( o.tButtonClass );\n            } else {\n                o.tButton.removeClass( o.tButtonClass );\n            }\n\n            // Remove o.noJSClass class and add click event to Toggle Link\n            o.tButton\n                .removeClass( o.noJSClass )\n                .off( 'mousedown.rm focusin.rm click.rm' )\n\n                // Use mousedown and focus to trigger toggle\n                .on( 'mousedown.rm focusin.rm', tButtonFocus )\n\n                // Disable click events\n                .on( 'click.rm', tButtonClick )\n\n                .attr( 'tabindex', 0 )\n            ;\n\n            // Add menu class and make submenus accessibly hidden\n            o.menus\n                .addClass( o.menuClass )\n                .attr( 'aria-hidden', 'false' )\n                .hide();\n\n            // Add top menu class\n            o.topMenu.addClass( o.topMenuClass );\n\n            // Adjust o.animateBool\n            if ( o.animateBool ) { // using CSS3 transitions\n\n                // Check if transitions and acceleration are supported\n                if ( typeof Modernizr !== 'undefined' ) { // Test with Modernizr\n                    if ( !Modernizr.csstransitions ) {\n                        o.animateBool = false;\n                        o.accelerateBool = false;\n                    } else if ( !Modernizr.csstransforms3d ) {\n                        o.accelerateBool = false;\n                    }\n                } else if ( !transitionsSupported() ) {\n                    o.animateBool = false;\n                    o.accelerateBool = false;\n                } else if ( !transform3DSupported()  ) {\n                    o.accelerateBool = false;\n                }\n            } else {\n                o.accelerateBool = false;\n            }\n\n            // Add animate and accelerate classes if CSS3 animation\n            if ( o.animateBool ) {\n                o.menus.addClass( o.animateClass );\n                if ( o.accelerateBool ) {\n                    o.menus.addClass( o.accelerateClass );\n                }\n            }\n\n            // Add and remove classes and click events\n            o.el\n                .removeClass( o.noJSClass )\n                .addClass( o.navElementClass )\n                .off( 'focusin.rm focusout.rm click.rm touchend.rm touchmove.rm' )\n\n                // Use focus to trigger menu item focus/hover behaviour\n                .on( 'focusin.rm', o.options.menuItemsSel, itemFocus )\n\n                // De-focus menu on focus out\n                .on( 'focusout.rm', o.topMenu, menuBlur )\n\n                // Use click and touchend to trigger click behaviour\n                .on( 'click.rm touchend.rm', o.options.menuItemsSel, itemClick )\n\n                // Set touchMoveBool to true on touchmove event\n                .on( 'touchmove.rm', o.options.menuItemsSel, touchMove )\n                .find( o.options.menuItemsSel )\n                    .each( function(i) {\n                        var $el = $( this );\n                        $el\n                            .addClass( o.menuItemClass)\n                            .children( 'a' ).attr( 'tabindex', 0 )\n                        ;\n                        if ( $el.is( ':first-child') ) {\n                            $el.addClass( o.itemFirst );\n                        }\n                        if ( $el.is( ':last-child') ) {\n                            $el.addClass( o.itemLast )\n                                .prev().addClass( o.item2ndLast );\n                        }\n                    })\n                    .addBack()\n                    .removeClass( o.parentClass )\n                    .has( o.options.menuSel )\n                        .addClass( o.parentClass )\n            ;\n\n            // Apply initial layout and adjustments\n            o.adjust();\n\n            return this;\n        };\n\n        /**\n         * Adjust plugin ============================================================\n         * @param {String} minWidth  - the min-width value (including units)\n         * minWidth must be in pixels if not using Modernizr. Should match media query in css file\n         */\n        o.adjust = function( minWidth ) {\n\n            // Get the breakpoint minimum width\n            minWidth = typeof minWidth !== 'undefined' ? minWidth : o.options.minWidth;\n\n            // Check browser width - set menu layout\n            if ( typeof Modernizr !== 'undefined' && Modernizr.mq('only all') ) { // MQs supported - Test with Modernizr\n                if ( o.options.developmentMode ) {\n                    console.log( 'Modernizr: MQ supported' );\n                }\n                if ( !Modernizr.mq( '( min-width: ' + minWidth + ' )' ) ) {\n                    o.layoutContracted();\n                } else {\n                    o.layoutExpanded();\n                }\n\n            } else { // Unable to detect MQ support - Test width using outerWidth - less reliable\n                if ( o.options.developmentMode ) {\n                    console.log( 'unable to detect MQ support' );\n                }\n                if ( $( window ).outerWidth() < parseInt( minWidth ) ) {\n                    o.layoutContracted();\n                } else {\n                    o.layoutExpanded();\n                }\n            }\n        };\n\n        // External Helper Functions ===============================================\n\n        /**\n         * Contracted layout\n         * @returns {Plugin}\n         */\n        o.layoutContracted = function() {\n\n            if ( !o.container.hasClass( o.contractedClass ) ) { // not contracted\n\n                // Contract any expanded siblings and their children\n                menuBlur( { 'type': 'layoutContracted' } );\n\n                // Apply Contracted class\n                o.container\n                    .removeClass( o.expandedClass )\n                    .addClass( o.contractedClass )\n                    .find( '.' + o.itemHoverClass ).removeClass( o.itemHoverClass );\n\n                if ( o.animateBool ) { // using CSS3 transitions\n\n                    // Recalculate menu heights\n                    o.calculateHeights();\n                }\n\n                // Remove hover events\n                o.el.off( 'mouseenter.le mouseleave.le' );\n\n                // Show Toggle Link and setup topMenu\n                o.tButton.addClass( o.tButtonShowClass );\n                if ( !o.tButton.hasClass( o.tButtonActiveClass ) ) { // topMenu not active\n\n                    // Hide topMenu\n                    o.topMenu\n                        .addClass( o.menuHiddenClass )\n                        .show()\n                        .removeClass( o.menuExpandedClass )\n                    ;\n                } else { // topMenu is active\n\n                    // Show topMenu\n                    o.topMenu\n                        .removeClass( o.menuHiddenClass )\n                        .show()\n                        .addClass( o.menuExpandedClass );\n                    if ( o.animateBool ) { // Using CSS3 transitions\n                        o.topMenu\n                            .css({\n                                'max-height': 'none'\n                            })\n                        ;\n                    }\n                }\n            }\n\n            if ( o.options.developmentMode ) {\n                console.log( 'responsive-menu: contracted layout' );\n            }\n            return this;\n        };\n\n        /**\n         * Expanded layout\n         * @returns {Plugin}\n         */\n        o.layoutExpanded = function() {\n\n            if ( !o.container.hasClass( o.expandedClass ) ) { // not expanded\n\n                // Contract any expanded siblings and their children\n                menuBlur( { 'type': 'layoutExpanded' } );\n\n                // Apply expanded class to container\n                o.container\n                    .removeClass( o.contractedClass )\n                    .addClass( o.expandedClass  )\n                    .find( '.' + o.itemHoverClass ).removeClass( o.itemHoverClass );\n\n                if ( o.animateBool ) { // using CSS3 transitions\n\n                    // Recalculate menu heights\n                    o.calculateHeights();\n                }\n\n                // Re-apply mouse events\n                o.el.off( 'mouseenter.le mouseleave.le' )\n\n                    // Add mouseenter to all menu items to trigger focus\n                    .on( 'mouseenter.le', o.options.menuItemsSel, itemFocus )\n\n                    // Add mouseleave to trigger focus when re-entering parent of expanded menu\n                    .on( 'mouseleave.le', o.options.menuItemsSel, itemLeave )\n\n                    // Add mouseleave on topmenu to trigger menu blur\n                    .on( 'mouseleave.le', o.topMenu, menuBlur )\n                ;\n\n                // Show Menu - Hide Toggle Link\n                o.tButton.removeClass( o.tButtonShowClass );\n                o.topMenu.removeClass( o.menuHiddenClass )\n                    .show()\n                    .addClass( o.menuExpandedClass );\n                if ( o.animateBool ) { // Using CSS3 transitions\n                    o.topMenu\n                        .css({\n                            'max-height': 'none',\n                            'overflow': 'visible'\n                        })\n                    ;\n                }\n            }\n            if ( o.options.developmentMode ) {\n                console.log( 'responsive-menu: expanded layout' );\n            }\n            return this;\n        };\n\n        /**\n         * Calculate the heights of each submenu and store in data object, reset styles\n         * Used when CSS3 transitions are enabled\n         * @returns {Plugin}\n         */\n        o.calculateHeights = function() {\n\n            // Unstyle menus to original state to measure heights and then reapply styles\n            o.menus\n                .addClass( o.menuCalcClass )\n                .removeClass( o.menuExpandedClass )\n                .attr( 'style', '' )\n                .show( 0 );\n\n            // Reselect to force application of styles\n            o.menus.each( function () {\n                    var $el = $( this );\n                    $el\n                        .data( 'height', $el.height() )\n                    ;\n                })\n                .css( {\n                    'max-height': '0'\n                })\n                .removeClass( o.menuCalcClass )\n            ;\n            return this;\n        };\n\n        /**\n         * Toggle visibility of entire menu\n         * @param {Object} el - The toggle Link element\n         */\n        o.toggleMenu = function( el ) {\n\n            // Contract all sub-menus\n            contract( o.topMenu );\n\n            if ( !o.topMenu.hasClass( o.menuHiddenClass ) ) { // topMenu is visible\n\n                // Hide topMenu\n                $( el ).removeClass( o.tButtonActiveClass );\n                contract( o.container );\n\n            } else { // menu is hidden\n\n                // Show topMenu\n                $( el ).addClass( o.tButtonActiveClass );\n                o.topMenu.removeClass( o.menuHiddenClass );\n                if ( o.animateBool ) { // Using CSS3 transitions\n                    o.topMenu.css( 'max-height', '0' );\n                } else { // Use jQuery animation\n                    o.topMenu.hide( 0 );\n                }\n                expand( o.el );\n            }\n\n        };\n\n        // internal Event Handler Functions ===============================================\n\n        /**\n         * Toggle Btn focus and mousedown event handler\n         * @param {event} e - event object\n         */\n        var tButtonFocus = function( e ) {\n\n            e.stopPropagation();\n\n            var $el = $( e.target );\n\n            clearTimeout( o.timer );\n            o.timer = setTimeout( function () {\n                o.toggleMenu( e.target );\n            }, 100 );\n        };\n\n        /**\n         * Toggle Btn Click event handler\n         * @param {event} e - event object\n         */\n        var tButtonClick = function( e ) {\n\n            e.preventDefault();\n            e.stopPropagation();\n        };\n\n        /**\n         * Item click and touchend event handler\n         * @param {event} e - event object\n         */\n        var itemClick = function( e ) {\n\n            var $el = $( e.currentTarget );\n\n            e.stopPropagation();\n\n            if ( ( $el.hasClass( o.itemHoverClass ) || !$el.hasClass( o.parentClass ) ) && !o.touchMoveBool ) {\n            \tvar t = $el.children( 'a' ).attr('href');\n            \tif (t != null) {\n            \t\tlocation.href = $el.children( 'a' ).attr('href');\n                    menuBlur( e );\n            \t}\n            } else if ( e.type !== 'touchend' ) {\n                e.preventDefault();\n            }\n\n            o.touchMoveBool = false;\n        };\n\n        /**\n         * Menu item focus and mouseenter event handler -\n         * Triggers: focus, mouseenter\n         * @param {event} e - event object\n         */\n        var itemFocus = function( e ) {\n\n            // get current target before it changes\n            var $el = $( e.currentTarget );\n\n            e.stopPropagation();\n\n            // Add focus if item does not have focus\n            if ( e.type !== 'focusin' ) {\n                $el.children( 'a' ).not( ':focus' ).focus();\n            }\n            o.itemFocused = $el;\n\n            clearTimeout( o.timer );\n            o.timer = setTimeout( function () {\n\n                // Expand topmenu if toggle button is active and menu is contracted\n                if ( o.tButton.hasClass( o.tButtonShowClass ) && !o.tButton.hasClass( o.tButtonActiveClass )) {\n                    o.toggleMenu( o.tButton.get(0) );\n                }\n\n                // Expand menu\n                if ( $el.hasClass( o.parentClass ) ) {\n\n                    if ( !$el.hasClass( o.itemHoverClass ) ) {\n\n                        // Contract any expanded siblings and their children\n                        contract( $el.parent() );\n\n                        expand( $el );\n                    }\n                } else {\n                    // Contract any expanded siblings and their children\n                    contract( $el.parent() );\n                }\n            }, 100 );\n        };\n\n        /**\n         * Touchmove event handler\n         * @param {event} e - event object\n         */\n        var touchMove = function( e ) {\n            o.touchMoveBool = true;\n        };\n\n        /**\n         * Topmenu mouseleave and foucusout event handler\n         * Triggers: mouseleave, focusout\n         * @param {event} e - event object\n         */\n        var menuBlur = function( e ) {\n\n            // Define event type if e is undefined\n            e = e || { 'type': 'callback' };\n\n            clearTimeout( o.timer );\n            o.timer = setTimeout( function () {\n\n                if ( o.itemFocused ) {\n                    o.itemFocused.children( 'a' ).blur();\n                    o.itemFocused = false;\n                }\n                contract( o.topMenu );\n            }, 100 );\n        };\n\n        /**\n         * Sub-menu item mouseleave event handler - used with expanded layout\n         * Triggers: mouseleave\n         * @param {event} e - event object\n         */\n        var itemLeave = function( e ) {\n\n            // get current target before it changes\n            var $el = $( e.currentTarget );\n\n            clearTimeout( o.timer );\n            o.timer = setTimeout( function () {\n\n                // Focus the parent element of the expanded menu\n                $el.parent().parent().children( 'a' ).focus();\n            }, 100 );\n        };\n\n        /**\n         * The CSS3 Transition End Contract event handler - used to add call-back functions to CSS3 transitions\n         * @param {event} e - event object\n         */\n        var transitionEndContract = function( e ) {\n\n            if ( e.originalEvent.propertyName === 'max-height' ) {\n\n                var $el = $( e.currentTarget );\n                e.stopPropagation();\n\n                // Menu Contracted\n                $el\n                    .css( {\n                        'transition': '',\n                        'max-height': '0',\n                        'overflow': 'hidden'\n                    } )\n                    .removeClass( o.menuExpandedClass )\n                    .off( 'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd' )\n                    .parent().find( '.' + o.itemHoverClass ).addBack().removeClass( o.itemHoverClass )\n                ;\n\n                if ( $el.hasClass( o.topMenuClass ) ) { // is topMenu\n\n                    // accessibly hide topMenu\n                    $el\n                        .addClass( o.menuHiddenClass )\n                        .show( 0 );\n                }\n\n                // Scroll to expanded menu\n                scrollMenu( o.itemFocused );\n            }\n        };\n\n        /**\n         * The CSS3 Transition End Expand event handler - used to add call-back functions to CSS3 transitions\n         * @param {event} e - event object\n         */\n        var transitionEndExpand = function( e ) {\n\n            if ( e.originalEvent.propertyName === 'max-height' ) {\n                var $el = $( e.currentTarget );\n                e.stopPropagation();\n\n                // Menu expanded\n                $el\n                    .removeClass( o.menuHiddenClass )\n                    .css( {\n                        'transition': '',\n                        'max-height': 'none',\n                        'overflow': 'visible'\n                    } )\n                    .addClass( o.menuExpandedClass )\n                    .off( 'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd' )\n                ;\n                $el.parent( '.' + o.parentClass ).addClass( o.itemHoverClass );\n\n                // Scroll to expanded menu\n                scrollMenu( o.itemFocused );\n            }\n        };\n\n        // Internal Helper Functions ===============================================\n\n        /**\n         * Contract sub-menus\n         * @param {Object} $parent - The parent element of the menu Item initiating the event\n         */\n        var contract = function( $parent ) {\n\n            var $menus = $parent.find( o.options.menuSel );\n\n            if ( o.animateBool ) { // Using CSS3 transitions\n\n                // Set max-height to height of each expanded menu\n                $menus.each( function(){\n                    var $el = $( this );\n                    if ( $el.height() !== 0 ) {\n                        $el\n                            .css({\n                                'max-height': $el.height(),\n                                'transition': 'max-height ' + String( o.options.transitionSpeed / 1000 ) + 's ' + o.options.css3Easing,\n                                'overflow': 'hidden'\n                            })\n                            .on( 'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', transitionEndContract )\n                        ;\n                    } else {\n                        $menus.not( $el );\n                    }\n                });\n\n                // Must force a redraw so transition will occur\n                $menus.hide(0).show(0);\n\n                // Contract menu\n                $menus\n                    .css({\n                        'max-height': '0'\n                    })\n                    .removeClass( o.menuExpandedClass )\n                ;\n\n            } else { // Use jQuery animation\n\n                // Contract menus\n                $menus.each( function() {\n\n                    var $el = $( this );\n\n                    if ( $el.height() !== 0 ) {\n\n                        $el\n                            .slideUp( o.options.transitionSpeed, o.options.jqueryEasing, function () {\n\n                                $el\n                                    .css( 'overflow', 'visible' )\n                                    .removeClass( o.menuExpandedClass )\n                                    .parent( '.' + o.parentClass )\n                                    .removeClass( o.itemHoverClass )\n                                ;\n\n                                if ( $el.hasClass( o.topMenuClass ) ) {\n                                    o.topMenu.addClass( o.menuHiddenClass );\n                                }\n\n                                // Scroll to expanded menu\n                                scrollMenu( o.itemFocused );\n                            })\n                        ;\n                    }\n                });\n            }\n        };\n\n        /**\n         * Expand sub-menu\n         * @param {Object} $el - The menu Item initiating the event\n         */\n        var expand = function( $el ) {\n\n            // Define menu\n            var $menu = $el.children( o.options.menuSel );\n\n            // Remove hover class from siblings\n            $el.siblings( '.' + o.itemHoverClass )\n                .removeClass( o.itemHoverClass );\n\n            if ( o.animateBool ) { // Using CSS3 transitions\n\n                // Expand menu\n                $menu\n                    .css({\n                        'transition': 'max-height ' + String( o.options.transitionSpeed / 1000 ) + 's ' + o.options.css3Easing,\n                        'max-height': $menu.data('height')\n                    })\n                    .on( 'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', transitionEndExpand )\n                ;\n            } else { // Use jQuery animation\n\n                // Expand menu\n                $menu\n                    .slideDown( o.options.transitionSpeed, o.options.jqueryEasing, function() {\n                        $el.addClass( o.itemHoverClass );\n                        $menu\n                            .addClass( o.menuExpandedClass )\n                            .css( 'overflow','visible' )\n                        ;\n                        console.log('jquery expand');\n\n                        // Scroll to expanded menu\n                        scrollMenu( o.itemFocused );\n                    })\n                ;\n            }\n        };\n\n        // initialize ----------------------------------------------------------------\n        o.init( el );\n\n        return this;\n    };\n\n    /**\n     * Create plugin obects\n     * @param {Object} options - Plugin options\n     * @returns {*}\n     */\n    $.fn[ pluginName ] = function( options ) {\n\n        // Return collection of elements\n        return this.each( function() {\n            var $el = $( this );\n            if ( !$el.data( pluginName ) ) {\n                $el.data( pluginName, new Plugin( this, options ) );\n            }\n        });\n    };\n\n    // Out of Scope Private functions ==================================================\n\n    /**\n     * Test for transform3d support\n     * @returns {boolean}\n     */\n    var transform3DSupported = function() {\n        var el = document.createElement('p'),\n            has3d,\n            transforms = {\n                'webkitTransform':'-webkit-transform',\n                'OTransform':'-o-transform',\n                'msTransform':'-ms-transform',\n                'MozTransform':'-moz-transform',\n                'transform':'transform'\n            };\n\n        // Add it to the body to get the computed style\n        document.body.insertBefore(el, null);\n\n        for(var t in transforms){\n            if( el.style[t] !== undefined ){\n                el.style[t] = 'translate3d(1px,1px,1px)';\n                has3d = window.getComputedStyle(el).getPropertyValue(transforms[t]);\n            }\n        }\n\n        document.body.removeChild(el);\n\n        return (has3d !== undefined && has3d.length > 0 && has3d !== \"none\");\n    };\n\n    /**\n     * Test for CSS3 transitions support\n     * @returns {boolean}\n     */\n    var transitionsSupported = function() {\n        var b = document.body || document.documentElement,\n            s = b.style,\n            p = 'transition';\n\n        if (typeof s[p] === 'string') { return true; }\n\n        // Tests for vendor specific prop\n        var v = ['Moz', 'webkit', 'Webkit', 'Khtml', 'O', 'ms'];\n        p = p.charAt(0).toUpperCase() + p.substr(1);\n\n        for (var i=0; i<v.length; i++) {\n            if (typeof s[v[i] + p] === 'string') { return true; }\n        }\n\n        return false;\n    };\n\n    /**\n     * Scroll Menu into viewport if off screen\n     * @returns {boolean}\n     */\n    var scrollMenu = function( $el ) {\n\n        if ( $el.length ) {\n\n            var viewTop = $( window ).scrollTop();\n            var viewBottom = viewTop + $( window ).height();\n            var boundsTop = $el.offset().top;\n            var boundsBottom = boundsTop + $el.outerHeight();\n\n            if ( boundsBottom > viewBottom || boundsTop < viewTop ) {\n                $( 'html, body' ).animate( { scrollTop: boundsTop }, 'slow' );\n            }\n        }\n    };\n\n})( jQuery, window, document, Math );\n\n\n\n//# sourceURL=webpack:///./.plone/++plone++docpool.menu/responsive-menu.js?");

/***/ })

}]);