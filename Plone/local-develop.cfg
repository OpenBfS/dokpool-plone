# development setup used by starzel.de
# - some dev-tools (including experimental.gracefulblobmissing)
# - filestorage on 8080
# - relstorage on 8081 with blobs in the filesystem
# - elan-db uses sqlite in tests and dev
[buildout]
extends = buildout.cfg

parts +=
    packages
    coverage
    coverage-test
    ploneversioncheck
    relstorage
    instance_relstorage

allow-picked-versions = true
show-picked-versions = true

extensions +=
    plone.versioncheck

auto-checkout +=
    experimental.gracefulblobmissing

[packages]
recipe = collective.recipe.omelette
eggs =
    ${instance:eggs}
    ${instance_relstorage:eggs}
packages = ${instance:location}/lib/python ./

[eggs]
devtools +=
    pdbpp
    Products.PDBDebugMode
    Products.PrintingMailHost
    plone.app.debugtoolbar
    Products.Ienablesettrace
    experimental.gracefulblobmissing

[database]
postgres_engine = postgres://elan:elan@localhost:5432/elan
sqlite_engine = sqlite:///../elan.sqlite
dsn = dbname=zodb user=zodbuser host=localhost password=zodbuser port=5432

[instance]
recipe = plone.recipe.zope2instance
user = admin:istrator
http-address = 8080
debug-mode = on
verbose-security = on
effective-user = ${users:zope-process}
http-fast-listen = on
zserver-threads = 4
zodb-cache-size = 100000
zeo-client = false
environment-vars =
    zope_i18n_compile_mo_files true
    PTS_LANGUAGES de
    zope_i18n_allowed_languages de
    ELANENGINE ${database:sqlite_engine}
    CATALOG_OPTIMIZATION_DISABLED 1
    DISABLE_HAUFE_MONITORING_ON_PDB True
eggs =
    ${eggs:main}
    ${eggs:devtools}

# Force our translation to be the first
# https://docs.plone.org/develop/plone/i18n/internationalisation.html#overriding-translations
zcml =
    ${zcml:main}
zope-conf-additional +=
    %import haufe.requestmonitoring
    <requestmonitor requestmonitor>
        period 5s
        verbosity 0
        <monitorhandler dumper>
            factory haufe.requestmonitoring.DumpTraceback.factory
            # 0 means no repetition
            # A negative value means indefinitely.
            repeat -1
            time 10s
        </monitorhandler>
    </requestmonitor>

[instance_relstorage]
# a postgresql-instance for testing
recipe = plone.recipe.zope2instance
user = ${users:zope-admin}:${passwords:zope-admin}
http-address = 8081
debug-mode = on
verbose-security = on
effective-user = ${users:zope-process}
http-fast-listen = on
zserver-threads = 4
zodb-cache-size = 100000
zeo-client = false
rel-storage =
    type postgresql
    dsn ${database:dsn}
    blob-dir ./blobs
    shared-blob-dir false
environment-vars =
    zope_i18n_compile_mo_files true
    PTS_LANGUAGES de
    zope_i18n_allowed_languages de
    ELANENGINE ${database:postgres_engine}
    CATALOG_OPTIMIZATION_DISABLED 1
    DISABLE_HAUFE_MONITORING_ON_PDB True
eggs =
    ${eggs:main}
    ${eggs:devtools}
    RelStorage
    psycopg2

# Force our translation to be the first
# https://docs.plone.org/develop/plone/i18n/internationalisation.html#overriding-translations
zcml =
    ${zcml:main}
zope-conf-additional +=
    %import haufe.requestmonitoring
    <requestmonitor requestmonitor>
        period 5s
        verbosity 0
        <monitorhandler dumper>
            factory haufe.requestmonitoring.DumpTraceback.factory
            # 0 means no repetition
            # A negative value means indefinitely.
            repeat -1
            time 10s
        </monitorhandler>
    </requestmonitor>

[relstorage]
recipe = zc.recipe.egg
eggs =
    ${instance:eggs}

[ploneversioncheck]
recipe = zc.recipe.egg
eggs = plone.versioncheck

[test]
environment = testenv

[testenv]
ELANENGINE = sqlite:///../elan.sqlite

[resources]
recipe = zc.recipe.egg
eggs =
    Products.CMFPlone
    plone.app.testing
scripts = plone-compile-resources

[coverage-test]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    # Remove old results
    echo "Erase old coverage results."
    bin/coverage erase
    # Collect test coverage results for all packages
    echo "Run test coverage analysis for all packages."
    bin/coverage run -p --source=src bin/test || exit 1
    echo "Create test coverage report."
    # Combine all package analysis
    bin/coverage combine
    # Generates a "coverage.xml" file that Jenkins can read and process from the
    # ".coverage" file that the coverage report created.
    bin/coverage html -i
    echo "Test coverage report finished. See parts/test/htmlreport/index.html"
output = ${buildout:directory}/bin/coverage-test
mode = 755

[sources]
experimental.gracefulblobmissing = git https://github.com/collective/experimental.gracefulblobmissing.git pushurl=git@github.com:collective/experimental.gracefulblobmissing.git branch=relstorage

[versions]
Products.Ienablesettrace = 1.0
lockfile = 0.12.2
plone.app.debugtoolbar = 1.1.4
Products.PrintingMailHost = 1.1.2
